{
  "version": 3,
  "sources": ["external-global:@serenity-is/extensions", "../../../Modules/_Ext/Bases/GridBase.ts", "../../../Modules/_Ext/Editors/GridItemPicker/GridItemPickerEditor.ts", "../../../Modules/_Ext/Editors/GridItemPicker/GridItemPickerDialog.ts", "../../../Modules/_Ext/_q/_q.ts", "../../../Modules/_Ext/_q/_q.datetime.ts", "../../../Modules/_Ext/_q/_q.editor-utils.ts", "../../../Modules/_Ext/_q/_q.enum.ts", "../../../Modules/_Ext/_q/_q.keyboard-layout.ts", "../../../Modules/_Ext/_q/_q.var.ts", "../../../Modules/_Ext/Utils/Using.ts", "../../../Modules/_Ext/Bases/DialogBase.ts", "../../../Modules/_Ext/Utils/DialogUtils.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "/// <reference path=\"../_q/_q.d.ts\" />\r\nimport * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport * as SleekGrid from \"@serenity-is/sleekgrid\"\r\nimport { DialogBase } from \"./DialogBase\"\r\nimport { ListReportRequest } from \"../../ServerTypes/_Ext/ListReportRequest\"\r\nimport { GridItemPickerEditor } from \"../Editors/GridItemPicker/GridItemPickerEditor\"\r\nimport { GridItemPickerDialog } from \"../Editors/GridItemPicker/GridItemPickerDialog\"\r\nimport * as q from \"../_q/_q\"\r\nimport { usingSlickAutoColumnSize, usingSlickGridEditors } from \"../Utils/Using\"\r\nimport * as Ext from \"@serenity-is/extensions\"\r\n\r\n@Serenity.Decorators.filterable()\nexport class GridBase<TItem, TOptions> extends Serenity.EntityGrid<TItem, TOptions> {\n    //getRowType() is now buit in getRowDefinition()\r\n    //protected getRowType(): { idProperty?: string, localTextPrefix?: string, nameProperty?: string, insertPermission?: string, updatePermission?: string, deletePermission?: string, } { return {}; }\r\n    //protected getIdProperty() { return this.getRowType().idProperty; }\r\n    //protected getLocalTextPrefix() { return this.getRowType().localTextPrefix; }\r\n    //protected getNameProperty() { return this.getRowType().nameProperty; }\r\n    //protected getInsertPermission() { return this.getRowType().insertPermission; }\r\n    //protected getUpdatePermission() { return this.getRowType().updatePermission; }\r\n    //protected getDeletePermission() { return this.getRowType().deletePermission; }\r\n\r\n    protected get_ExtGridOptions(): ExtGridOptions { return Q.deepClone(q.DefaultMainGridOptions); }\r\n    protected isPickerMode(): boolean { return this.element.hasClass('RowSelectionCheckGrid'); }\r\n    protected getGrouping()/*: Slick.GroupInfo<TItem>[]*/ { return []; }\r\n\r\n    isReadOnly: boolean;\r\n    isRequired: boolean;\r\n    isAutosized = false;\r\n    isChildGrid = false;\r\n    nextRowNumber = 1;\r\n    public autoColumnSizePlugin;\r\n\r\n    public rowSelection: Serenity.GridRowSelectionMixin;\r\n    public pickerDialog: GridItemPickerDialog;\r\n\r\n    constructor(container: JQuery, options?: TOptions) {\r\n        super(container, options);\r\n\r\n        let extOptions = this.get_ExtGridOptions();\r\n\r\n        if (extOptions.AutoColumnSize == true) {\r\n            this.slickContainer.fadeTo(0, 0);\r\n        }\r\n\r\n        if (extOptions.ShowRowSelectionCheckboxColumn == true) {\r\n            this.rowSelection = new Serenity.GridRowSelectionMixin(this);\r\n        }\r\n\r\n        let grouping = this.getGrouping();\r\n        if (grouping.length > 0)\r\n            this.setGrouping(grouping);\r\n\r\n    }\r\n\r\n    protected markupReady(): void {\r\n        super.markupReady();\r\n\r\n        setTimeout(() => {\r\n            if (this.isAutosized == false) {\r\n                if (this.get_ExtGridOptions().AutoColumnSize == true) {\r\n                    this.resizeAllCulumn();\r\n                }\r\n                this.slickContainer.fadeTo(100, 1);\r\n            }\r\n        }, 100);\r\n\r\n    }\r\n\r\n    protected getButtons() {\r\n        var buttons = super.getButtons();\r\n        let reportRequest = this.getReportRequest();\r\n\r\n        if (reportRequest.ListExcelServiceMethodName) {\r\n            buttons.push(Ext.ExcelExportHelper.createToolButton({\r\n                grid: this,\r\n                service: this.getService() + '/' + reportRequest.ListExcelServiceMethodName,\r\n                onViewSubmit: () => this.onViewSubmit(),\r\n                separator: true\r\n            }));\r\n        }\r\n\r\n        if (reportRequest.ReportKey) {\r\n            buttons.push({\r\n                title: q.text('Controls.ExportToPDF', 'Export to PDF'),\r\n                icon: 'fa fa-file-pdf-o',\r\n                onClick: () => {\r\n                    let request = this.getReportRequest();\r\n                    if (request)\r\n                        Ext.ReportHelper.execute({ reportKey: reportRequest.ReportKey, params: { request: request } });\r\n                }\r\n            });\r\n\r\n            buttons.push({\r\n                title: q.text('Controls.ViewAsReport', 'View as Report'),\r\n                icon: 'fa fa-html5',\r\n                onClick: () => {\r\n                    let request = this.getReportRequest();\r\n                    if (request)\r\n                        Ext.ReportHelper.execute({ reportKey: reportRequest.ReportKey, params: { request: request }, extension: 'html' });\r\n                }\r\n            });\r\n\r\n        } else if (reportRequest.ReportServiceMethodName) {\r\n            buttons.push({\r\n                title: q.text('Controls.ViewAsReport', 'View as Report'),\r\n                icon: 'fa fa-eye',\r\n                onClick: () => {\r\n                    let request = this.getReportRequest();\r\n                    if (request)\r\n                        Q.postToService({ service: Q.resolveUrl(this.getService() + '/' + reportRequest.ReportServiceMethodName), request: request, target: '_blank' });\r\n                }\r\n            });\r\n\r\n        } else {\r\n            //buttons.push(PdfExportHelper.createToolButton({\r\n            //    grid: this,\r\n            //    tableOptions: { theme: 'grid' },\r\n            //    onViewSubmit: () => this.onViewSubmit()\r\n            //}));\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected getReportRequest(): ListReportRequest {\r\n        let view = this.getView();\r\n\r\n        var request = Q.deepClone(view ? view.params : {}) //as _Ext.ReportRequest;\r\n        request.ReportServiceMethodName = null;     // if some value found in this property then \"view as report\" button will appear\r\n        request.ReportKey = null;                   // if some value found in this property then \"export to pdf\" button will appear\r\n        request.ListExcelServiceMethodName = q.ListExcelServiceMethodName;  // if some value found in this property then \"export to xls\" button will appear\r\n        request.EqualityFilterWithTextValue = {};\r\n        request.CustomParameters = {};\r\n\r\n        if (view) {\r\n            let quickFilters = this.getQuickFilters();\r\n\r\n            for (let quickFilter of quickFilters) {\r\n                let filterValue = request.EqualityFilter[quickFilter.field];\r\n                if (filterValue && filterValue.length > 0) {\r\n                    if (quickFilter.options.lookupKey) {\r\n                        let lookup = Q.getLookup(quickFilter.options.lookupKey);\r\n                        request.EqualityFilterWithTextValue[quickFilter.title] = lookup.itemById[filterValue][lookup.textField];\r\n                    }\r\n                    else if (quickFilter.options.enumKey) {\r\n                        let enumKey = quickFilter.options.enumKey;\r\n                        let enumValue = Q.toId(filterValue);\r\n                        request.EqualityFilterWithTextValue[quickFilter.title] = Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), enumValue);\r\n                    }\r\n                    else if (quickFilter.type == GridItemPickerEditor) {\r\n                        var customFilter = this.findQuickFilter(GridItemPickerEditor, quickFilter.field);\r\n                        request.EqualityFilterWithTextValue[quickFilter.title] = customFilter.text;\r\n\r\n                    }\r\n                    else {\r\n                        request.EqualityFilterWithTextValue[quickFilter.title] = filterValue;\r\n                    }\r\n                } else if (quickFilter.type == Serenity.DateEditor) {\r\n                    let qf = this.findQuickFilter(Serenity.DateEditor, quickFilter.field);\r\n                    let dateFrom = qf.element.val();\r\n                    let dateTo = qf.element.siblings('input').val()\r\n\r\n                    let filterText = '';\r\n\r\n                    if (!Q.isEmptyOrNull(dateFrom))\r\n                        filterText = Q.format(q.text('Controls.FromDate', 'From {0}'), dateFrom) + ' ';\r\n\r\n                    if (!Q.isEmptyOrNull(dateTo))\r\n                        filterText = filterText + Q.format(q.text('Controls.ToDate', 'To {0}'), dateTo);\r\n\r\n                    if (!Q.isEmptyOrNull(filterText)) {\r\n                        request.EqualityFilterWithTextValue[quickFilter.title] = filterText\r\n                    }\r\n                    else if (this.get_ExtGridOptions().ShowAnyInEqualityFilterWithTextValue == true) {\r\n                        request.EqualityFilterWithTextValue[quickFilter.title] = q.text('Controls.All', 'all')\r\n                    }\r\n                } else if (this.get_ExtGridOptions().ShowAnyInEqualityFilterWithTextValue == true) {\r\n                    request.EqualityFilterWithTextValue[quickFilter.title] = q.text('Controls.All', 'all')\r\n                }\r\n            }\r\n\r\n            if (this.filterBar) {\r\n                let filterBarDisplayText = this.filterBar.get_store().get_displayText();\r\n                if (!Q.isEmptyOrNull(filterBarDisplayText))\r\n                    request.EqualityFilterWithTextValue[Q.text('Controls.FilterPanel.EditFilter')] = filterBarDisplayText;\r\n            }\r\n\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    protected getColumns(): SleekGrid.Column[] {\r\n        let columns = super.getColumns();\r\n\r\n        let isEditable = this.getSlickOptions().editable;\r\n        let extOptions = this.get_ExtGridOptions();\r\n\r\n        if (isEditable == true) {\r\n            usingSlickGridEditors();\r\n        }\r\n\r\n        columns.forEach(column => {\r\n            let columnCssClass = column.cssClass || '';\r\n            let columnWidth = column.minWidth || column.width || 50;\r\n\r\n            if (column.sourceItem) {\r\n                let formatterType = column.sourceItem.formatterType;\r\n                //width and cssClass\r\n                if (column.sourceItem.filteringType == \"Lookup\") {\r\n                    columnCssClass = ' align-left';\r\n                    columnWidth = column.minWidth > 100 ? column.minWidth : 100;\r\n                } else if (formatterType == \"Enum\") {\r\n                    columnWidth = column.minWidth > 100 ? column.minWidth : 100;\r\n                } else if (formatterType == \"Date\") {\r\n                    columnCssClass = ' align-center';\r\n                    columnWidth = column.minWidth > 99 ? column.minWidth : 99;\r\n                } else if (formatterType == \"DateTime\") {\r\n                    columnCssClass = ' align-center';\r\n                    columnWidth = column.minWidth > 140 ? column.minWidth : 140;\r\n                } else if (formatterType == \"Number\") {\r\n                    columnCssClass = ' align-right';\r\n\r\n                } else if (formatterType == \"Checkbox\") {\r\n                    columnCssClass = ' align-center';\r\n                } else {\r\n                    columnCssClass = ' align-left';\r\n                    columnWidth = column.minWidth > 99 ? column.minWidth : 99;\r\n                }\r\n\r\n                //formatter                    \r\n                let emptyText = column.sourceItem.placeholder == 'Controls.All' ? q.text('Controls.All', 'All') : '-';\r\n\r\n                if (column.sourceItem.editorType == \"Lookup\") {\r\n                    if (!column.sourceItem.editorParams.autoComplete) {\r\n                        column.format = ctx => {\r\n                            let lookup = Q.getLookup(column.sourceItem.editorParams.lookupKey);\r\n                            if (ctx.column.sourceItem.editorParams.multiple == true) {\r\n                                if (ctx.value) {\r\n                                    let items = ctx.value.map(m => lookup.itemById[m]);\r\n                                    let texts = items.map(m => m[lookup.textField]);\r\n\r\n                                    return texts.length > 0 ? texts.join(', ') : emptyText;\r\n                                }\r\n                            } else {\r\n                                let item = lookup.itemById[ctx.value];\r\n                                if (item) return item[lookup.textField];\r\n                                else return emptyText;\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (column.sourceItem.editorType == \"ServiceLookup\") {\r\n                    if (!column.sourceItem.editorParams.autoComplete) {\r\n                        (column as any).textFieldInThisRow = column.sourceItem.editorParams.textFieldInThisRow || column.sourceItem.editorParams.textField;\r\n                        column.formatter = (row, cell, value, columnDef: any, dataContext) => {\r\n                            if (dataContext) return dataContext[columnDef.textFieldInThisRow];\r\n                            else return emptyText;\r\n                        };\r\n                    }\r\n                } else if (column.sourceItem.filteringType == \"Lookup\") {\r\n                    column.formatter = (row, cell, value, columnDef: any, dataContext) => {\r\n                        if (Q.isEmptyOrNull(value)) return emptyText;\r\n                        else return value;\r\n                    };\r\n\r\n                } else if (formatterType == \"Enum\") {\r\n\r\n                    column.formatter = (row, cell, value, columnDef: any, dataContext) => {\r\n                        let enumKey = columnDef.sourceItem.editorParams.enumKey\r\n                        if (columnDef.sourceItem.editorParams.multiple == true) {\r\n                            let texts = '';\r\n\r\n                            let vals = value as number[];\r\n                            if (vals && vals.length > 0) {\r\n                                texts = vals.map(m => Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), Q.toId(m))).join(', ');\r\n                            }\r\n                            if (texts) return texts;\r\n                            else return emptyText;\r\n\r\n                        }\r\n                        else {\r\n                            let text = Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), Q.toId(value));\r\n                            if (text) return text;\r\n                            else return emptyText;\r\n                        }\r\n                    };\r\n                } else if (column.sourceItem.editorType == \"Decimal\") {\r\n\r\n                    let formatSrt = '#,##0.00';\r\n\r\n                    if (column.sourceItem.editorParams) {\r\n                        let decimals = column.sourceItem.editorParams['decimals'];\r\n                        if (decimals) {\r\n                            formatSrt = '#,##0.'\r\n                            for (let i = 0; i < decimals; i++) {\r\n                                formatSrt += '0'\r\n                            }\r\n                        }\r\n                        else if (column.sourceItem.editorParams['minValue']) {\r\n                            let splitedMinValue = (column.sourceItem.editorParams['minValue'] as string).split('.');\r\n                            if (splitedMinValue.length > 1) {\r\n                                formatSrt = '#,##0.' + splitedMinValue[1];\r\n                            } else {\r\n                                formatSrt = '#,##0';\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    column.format = ctx => Serenity.NumberFormatter.format(ctx.value, formatSrt);\r\n                }\r\n\r\n                //editor\r\n                if (isEditable == true && column.sourceItem.readOnly != true) {\r\n                    if (q.useSerenityInlineEditors) {\r\n                        column.editor = SerenityInlineEditor as any;\r\n                    } else {\r\n                        let editorType = column.sourceItem.editorType;\r\n\r\n                        if (editorType == \"Lookup\" || editorType == \"Enum\") {\r\n                            column.editor = Slick['Editors']['Select2'];\r\n                            columnWidth = column.minWidth > 160 ? column.minWidth : 160;\r\n                        } else if (editorType == \"Date\") {\r\n                            column.editor = Slick['Editors']['Date'];\r\n                        } else if (editorType == \"Boolean\") {\r\n                            column.editor = Slick['Editors']['Checkbox'];\r\n                        } else if (editorType == \"Integer\") {\r\n                            column.editor = Slick['Editors']['Integer'];\r\n                        } else if (editorType == \"Decimal\") {\r\n                            column.editor = Slick['Editors']['Float'];\r\n                        } else if (editorType == \"YesNoSelect\") {\r\n                            column.editor = Slick['Editors']['YesNoSelect'];\r\n                        } else if (editorType == \"PercentComplete\") {\r\n                            column.editor = Slick['Editors']['PercentComplete'];\r\n                        } else if (editorType == \"LongText\") {\r\n                            column.editor = Slick['Editors']['LongText'];\r\n                        } else {\r\n                            column.editor = Slick['Editors']['Text'];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            column.cssClass += columnCssClass;\r\n            if (this.get_ExtGridOptions().AutoColumnSize == true) {\r\n                column.width = columnWidth;\r\n            }\r\n        });\r\n\r\n        columns.unshift({\r\n            field: 'RowNum',\r\n            name: '#',\r\n            cssClass: 'rownum-column',\r\n            headerCssClass: 'align-center',\r\n            width: 40,\r\n            minWidth: 40,\r\n            maxWidth: 40,\r\n            visible: extOptions.ShowRowNumberColumn,\r\n            format: ctx => {\r\n                if (!ctx.item.RowNum) {\r\n                    ctx.item.RowNum = this.nextRowNumber++;\r\n                }\r\n                return String(ctx.item.RowNum);\r\n            }\r\n        });\r\n\r\n        if (extOptions.ShowInlineActionsColumn == true) {\r\n            let inlineActionsColumnWidth = 0;\r\n            let inlineActionsColumnContent = '';\r\n\r\n            if (extOptions.ShowEditInlineButtun == true) {\r\n                inlineActionsColumnWidth += 32;\r\n                var title = this.isReadOnly ? q.text('Controls.View', 'View Details') : q.text('Controls.Edit', 'Edit');\r\n                inlineActionsColumnContent += `<a class=\"inline-actions view-details\" title=\"${title}\" style=\"font-size: 1.2em;\"><i class=\"view-details fa fa-pencil-square-o\"></i></a>`;\r\n            }\r\n\r\n            if (extOptions.ShowDeleteInlineButtun == true) {\r\n                inlineActionsColumnWidth += 22;\r\n                inlineActionsColumnContent += `<a class=\"inline-actions delete-row\" title=\"${q.text('Controls.Delete', 'Delete')}\" style=\"padding-left: 5px;\"><i class=\"delete-row fa fa-trash-o text-red\"></i></a>`;\r\n            }\r\n\r\n            if (extOptions.ShowPrintInlineButtun == true) {\r\n                inlineActionsColumnWidth += 25;\r\n                inlineActionsColumnContent += `<a class=\"inline-actions print-row\" title=\"${q.text('Controls.Print', 'Print')}\" style=\"padding-left: 5px;\"><i class=\"print-row fa fa-print\"></i></a>`;\r\n            }\r\n\r\n            columns.unshift({\r\n                field: 'inline-actions',\r\n                name: '',\r\n                cssClass: 'inline-actions-column',\r\n                width: inlineActionsColumnWidth,\r\n                minWidth: inlineActionsColumnWidth,\r\n                maxWidth: inlineActionsColumnWidth,\r\n                formatter: (row, cell, value, columnDef, dataContext) => {\r\n                    return inlineActionsColumnContent;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (extOptions.ShowRowSelectionCheckboxColumn == true) {\r\n            let rowSelectionCol = Serenity.GridRowSelectionMixin.createSelectColumn(() => this.rowSelection);\r\n            rowSelectionCol.width = rowSelectionCol.minWidth = rowSelectionCol.maxWidth = 27\r\n            columns.unshift(rowSelectionCol);\r\n        }\r\n\r\n        if (this.isPickerMode()) { //show checkbox column in picker mode\r\n            let options = (this.options as any) as GridItemPickerEditorOptions;\r\n            if (!options.multiple && !options.gridType) {\r\n                Q.notifyWarning(\"Could not determine multiple/single. Probably there is no 'options' parameter in grid's constructor.\");\r\n            }\r\n\r\n            //remove edit link in picker mode\r\n            columns.forEach(column => {\r\n                if (column.sourceItem && column.sourceItem.editLink)\r\n                    column.format = undefined;\r\n            });\r\n\r\n            if (options.multiple == true) {\r\n                let rowSelectionCol = Serenity.GridRowSelectionMixin.createSelectColumn(() => this.rowSelection);\r\n                rowSelectionCol.width = rowSelectionCol.minWidth = rowSelectionCol.maxWidth = 27\r\n                columns.unshift(rowSelectionCol);\r\n            } else {\r\n                columns.unshift({\r\n                    field: 'row-selection',\r\n                    name: '',\r\n                    cssClass: 'inline-actions-column',\r\n                    width: 66,\r\n                    minWidth: 66,\r\n                    maxWidth: 66,\r\n                    format: ctx => '<a class=\"inline-actions select-row\"><i class=\"select-row fa fa-check\"></i> Select</a>'\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return columns;\r\n    }\r\n\r\n    protected createSlickGrid() {\r\n        var grid = super.createSlickGrid();\r\n\r\n        usingSlickAutoColumnSize();\r\n\r\n        if (Slick.AutoColumnSize) {\r\n            this.autoColumnSizePlugin = new Slick.AutoColumnSize();\r\n            grid.registerPlugin(this.autoColumnSizePlugin);\r\n        }\r\n        grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());\r\n\r\n        return grid;\r\n    }\r\n\r\n    public resetColumns(columns: SleekGrid.Column[]) {\r\n\r\n        this.slickContainer.fadeTo(0, 0);\r\n\r\n        this.slickGrid.setColumns(columns);\r\n\r\n        setTimeout(() => {\r\n            if (this.get_ExtGridOptions().AutoColumnSize == true) {\r\n                this.resizeAllCulumn();\r\n            }\r\n            this.slickContainer.fadeTo(100, 1);\r\n        }, 100);\r\n\r\n    }\r\n\r\n    public resizeAllCulumn() {\r\n        this.isAutosized = true;\r\n\r\n        let gridContainerWidth = this.slickContainer.width();\r\n\r\n        if (gridContainerWidth > 0) { } else { gridContainerWidth = this.element.closest('.s-Dialog').width() - 55; }\r\n        if (gridContainerWidth > 0) { } else { gridContainerWidth = this.element.closest('.s-Panel').width() - 55; }\r\n        if (gridContainerWidth > 0) { } else { gridContainerWidth = $('section.content').width() - 75; }\r\n\r\n        this.slickGrid.setOptions({ forceFitColumns: false });\r\n\r\n        let allVisibleColumns = this.autoColumnSizePlugin.resizeAllColumns().filter(f => f.visible != false) as SleekGrid.Column[];// this.allColumns;\r\n\r\n\r\n        let allVisibleColumnWidth = 0;\r\n        allVisibleColumns.map(m => m.width).forEach(e => allVisibleColumnWidth += e);\r\n\r\n\r\n        if (allVisibleColumnWidth > gridContainerWidth) {\r\n            this.autoColumnSizePlugin.resizeAllColumns()\r\n\r\n        } else if (allVisibleColumnWidth < gridContainerWidth) {\r\n            this.autoColumnSizePlugin.resizeAllColumns()\r\n            let fixedSizeColumns = [];\r\n            let resizableColumns = [];\r\n\r\n            allVisibleColumns.forEach(c => {\r\n\r\n                if (c.minWidth == c.maxWidth) {\r\n                    fixedSizeColumns.push(c);\r\n                    c.width = c.maxWidth;\r\n                } else if (c.cssClass && c.cssClass.indexOf(\"no-auto-size\") >= 0) {\r\n                    fixedSizeColumns.push(c);\r\n                } else if (c.sourceItem) {\r\n                    if (c.sourceItem.formatterType == String(\"Number\")) {\r\n                        fixedSizeColumns.push(c);\r\n                    }\r\n                    else if (c.sourceItem.filteringType == String(\"Enum\")) {\r\n                        fixedSizeColumns.push(c);\r\n                        if (c.width < 80) c.width = 80\r\n                    }\r\n                    else if (c.sourceItem.formatterType == String(\"Date\")) {\r\n                        fixedSizeColumns.push(c);\r\n\r\n                        if (c.width < 80) c.width = 80\r\n                    } else if (c.sourceItem.formatterType == String(\"DateTime\")) {\r\n                        fixedSizeColumns.push(c);\r\n\r\n                        if (c.width < 150) c.width = 150\r\n                    } else if (c.sourceItem.formatterType == String(\"Checkbox\")) {\r\n                        fixedSizeColumns.push(c);\r\n                    } else {\r\n                        resizableColumns.push(c);\r\n                    }\r\n                }\r\n                else {\r\n                    resizableColumns.push(c);\r\n                }\r\n\r\n            });\r\n\r\n            if (resizableColumns.length == 0) {\r\n                fixedSizeColumns = [];\r\n                resizableColumns = [];\r\n\r\n                allVisibleColumns.forEach(c => {\r\n\r\n                    if (c.minWidth == c.maxWidth) {\r\n                        fixedSizeColumns.push(c);\r\n                        c.width = c.maxWidth;\r\n                    } else {\r\n                        resizableColumns.push(c);\r\n                    }\r\n\r\n                });\r\n            }\r\n\r\n            let fixedSizeColumnsWidth = 0;\r\n            fixedSizeColumns.map(m => m.width).forEach(e => fixedSizeColumnsWidth += e);\r\n\r\n            let stretchableGridAreaWidth = gridContainerWidth - fixedSizeColumnsWidth - (this.isChildGrid ? 48 : 18);\r\n\r\n            let resizableColumnsWidth = 0;\r\n            resizableColumns\r\n                .map(m => m.width)\r\n                .forEach(e => resizableColumnsWidth += e);\r\n\r\n            resizableColumns.forEach(c => {\r\n                let widthMultiplyingFactor = stretchableGridAreaWidth / resizableColumnsWidth;\r\n                let newWidth = c.width * widthMultiplyingFactor;\r\n                let increment = newWidth - c.width;\r\n\r\n                //if (increment <= 200) // maximum streching is 200\r\n                c.width = newWidth;\r\n                //else c.width = c.width + 200;\r\n\r\n            });\r\n\r\n            this.slickGrid.setColumns(allVisibleColumns);\r\n            this.slickGrid.onColumnsResized.notify();\r\n\r\n        }\r\n        this.setItems(this.getItems());\r\n    }\r\n\r\n    protected getSlickOptions() {\r\n        let opt = super.getSlickOptions();\r\n        if (this.get_ExtGridOptions().AutoColumnSize == true) {\r\n            opt.forceFitColumns = true;\r\n        }\r\n\r\n        opt.enableTextSelectionOnCells = true;\r\n\r\n        opt.enableCellNavigation = true;\r\n        opt.asyncEditorLoading = false;\r\n        opt.autoEdit = true;\r\n        opt.rowHeight = 27;\r\n\r\n        return opt;\r\n    }\r\n\r\n    protected getViewOptions() {\r\n        let opt = super.getViewOptions();\r\n\r\n        opt.rowsPerPage = q.DefaultMainGridOptions.RowsPerPage;\r\n\r\n        return opt;\r\n    }\r\n\r\n    protected getPrintRowServiceMethod() { return 'Print' }\r\n\r\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (e.isDefaultPrevented())\r\n            return;\r\n\r\n        var item = this.itemAt(row) as TItem;\r\n        let recordId = item[this.getIdProperty()];\r\n        var target = $(e.target);\r\n\r\n        // if user clicks \"i\" element, e.g. icon\r\n        if (target.parent().hasClass('inline-action') || target.parent().hasClass('inline-actions') || target.parent().hasClass('inline-btn'))\r\n            target = target.parent();\r\n\r\n        if (target.hasClass('inline-action') || target.hasClass('inline-actions') || target.hasClass('inline-btn')) {\r\n            //e.preventDefault();\r\n\r\n            this.onInlineActionClick(target, recordId, item);\r\n\r\n        }\r\n    }\r\n\r\n    protected onInlineActionClick(target: JQuery, recordId, item: TItem): void {\r\n        if (target.hasClass('delete-row')) {\r\n            if (this.isReadOnly == true) {\r\n                Q.notifyWarning('Read only records could not be deleted!');\r\n            } else {\r\n                Q.confirm(q.text('Db.Administration.Translation.DeleteWarning', 'Delete record?'), () => {\r\n                    let o = this as any;\r\n                    if (o.deleteEntity) { //for in-memory grid\r\n                        o.deleteEntity(recordId);\r\n                    }\r\n                    else {\r\n                        Q.serviceRequest(this.getService() + '/Delete', { EntityId: recordId }, response => {\r\n                            this.refresh();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (target.hasClass('view-details')) {\r\n            (this.slickGrid as any).getEditController().commitCurrentEdit();\r\n\r\n            this.editItem(recordId);\r\n        }\r\n        else if (target.hasClass('print-row')) {\r\n            let request: Serenity.RetrieveRequest = { EntityId: recordId };\r\n\r\n            Q.postToService({ service: Q.resolveUrl(this.getService() + '/' + this.getPrintRowServiceMethod()), request: request, target: '_blank' });\r\n        }\r\n        else if (target.hasClass('select-row')) {\r\n            this.rowSelection.setSelectedKeys([recordId]);\r\n            this.pickerDialog.onSuccess(this.selectedItems);\r\n            this.pickerDialog.dialogClose();\r\n        }\r\n    }\r\n\r\n    protected resetRowNumber() {\r\n        this.nextRowNumber = 1;\r\n        let items = this.getItems();\r\n\r\n        let grouping_fields = this.view.getGrouping();\r\n\r\n        if (grouping_fields.length == 0) {\r\n            for (let i = 0; i < items.length; i++) {\r\n                (items[i] as any).RowNum = i + 1;\r\n            }\r\n        } else if (grouping_fields.length > 0) {\r\n\r\n            let generateRowNumber = (groups: SleekGrid.Group<any>[]) => {\r\n\r\n                for (let gi = 0; gi < groups.length; gi++) {\r\n                    let subGroups = groups[gi].groups;\r\n                    if (subGroups) {\r\n                        generateRowNumber(subGroups);\r\n                    } else {\r\n                        let rows = groups[gi].rows;\r\n                        for (let i = 0; i < rows.length; i++) {\r\n                            rows[i].RowNum = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            let groups = this.view.getGroups();\r\n            generateRowNumber(groups);\r\n        }\r\n\r\n        this.setItems(items);\r\n    }\r\n\r\n    //override getGrouping instead of calling setGrouping\r\n    public setGrouping(groupInfo/*: Slick.GroupInfo<TItem>[]*/): void {\r\n        this.view.setGrouping(groupInfo);\r\n        this.resetRowNumber();\r\n    }\r\n\r\n    protected getIncludeColumns(include: { [key: string]: boolean; }) {\r\n        super.getIncludeColumns(include);\r\n        let grouping = this.getGrouping();\r\n\r\n        if (grouping.length > 0)\r\n            grouping.forEach(f => include[f.getter] = true);\r\n    }\r\n\r\n    protected getDefaultSortBy() {\r\n        let sortBy = super.getDefaultSortBy();\r\n        let grouping = this.getGrouping();\r\n\r\n        if (grouping.length > 0)\r\n            grouping.forEach(f => sortBy.unshift(f.getter));\r\n\r\n        return sortBy;\r\n    }\r\n\r\n    protected onViewProcessData(response: Serenity.ListResponse<TItem>): Serenity.ListResponse<TItem> {\r\n        let r = super.onViewProcessData(response);\r\n\r\n        if (this.get_ExtGridOptions().ShowRowNumberColumn == true) {\r\n            setTimeout(() => { this.resetRowNumber() });\r\n        }\r\n        return r;\r\n    }\r\n\r\n    public initDialog(dialog: DialogBase<TItem, any>): void {\r\n        super.initDialog(dialog);\r\n\r\n        dialog.parentGrid = this;\r\n    }\r\n\r\n    get selectedItems() {\r\n        return this.rowSelection.getSelectedKeys().map(m => {\r\n            let item = this.view.getItemById(m);\r\n\r\n            if (!item) {\r\n                item = {} as any;\r\n                item[this.getIdProperty()] = m\r\n            }\r\n\r\n            return item\r\n        })\r\n    }\r\n\r\n    set selectedKeys(value: any[]) {\r\n        let options = (this.options as any) as GridItemPickerEditorOptions;\r\n        if (options.multiple == true) {\r\n            this.rowSelection.setSelectedKeys(value);\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    protected onViewSubmit() {\r\n        if (!super.onViewSubmit()) {\r\n            return false;\r\n        }\r\n\r\n        var request = this.view.params as Serenity.ListRequest;\r\n\r\n        let options = (this.options as any) as GridItemPickerEditorOptions;\r\n\r\n        if (options.filteringCriteria) {\r\n            request.Criteria = Serenity.Criteria.and(request.Criteria, options.filteringCriteria);\r\n        }\r\n\r\n        if (options.filterField && Q.isValue(options.filterValue)) {\r\n            request.EqualityFilter = request.EqualityFilter || {};\r\n            request.EqualityFilter[options.filterField] = options.filterValue;\r\n        }\r\n\r\n        let cascadeField = options.cascadeField || options.cascadeFrom;\r\n        if (cascadeField && Q.isValue(options.cascadeValue)) {\r\n            request.EqualityFilter = request.EqualityFilter || {};\r\n            request.EqualityFilter[cascadeField] = options.cascadeValue;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport { DialogBase } from \"../../Bases/DialogBase\"\r\nimport { GridItemPickerDialog } from \"./GridItemPickerDialog\"\r\n\r\n@Serenity.Decorators.registerEditor('_Ext.GridItemPickerEditor', [Serenity.ISetEditValue, Serenity.IGetEditValue, Serenity.IStringValue, Serenity.IReadOnly, Serenity.IValidateRequired])\r\n@Serenity.Decorators.element(\"<input type=\\\"text\\\" />\")\r\nexport class GridItemPickerEditor extends Serenity.Widget<GridItemPickerEditorOptions>\r\n    implements Serenity.ISetEditValue, Serenity.IGetEditValue, Serenity.IStringValue, Serenity.IReadOnly, Serenity.IValidateRequired {\r\n\r\n    containerDiv: JQuery;\r\n    inplaceSearchButton: JQuery;\r\n    inplaceViewButton: JQuery;\r\n    clearSelectionButton: JQuery;\r\n\r\n    constructor(container: JQuery, public options: GridItemPickerEditorOptions) {\r\n        super(container, options);\r\n\r\n        this.element.addClass('select2-offscreen');\r\n\r\n        this.containerDiv = $(`<div class=\"editor s-GridItemPickerEditor select2-container ${options.multiple ? 'select2-container-multi' : ''} has-inplace-button\">\r\n                        <div class=\"${options.multiple ? 'select2-choices' : 'select2-choice'}\">\r\n                            <div class=\"display-text\" style=\"user-select: text; padding-right: 20px;${options.multiple ? 'padding-left: 5px;' : ''}\"></div>\r\n                            <a class=\"select2-search-choice-close btn-clear-selection\" style=\"margin-top: 2px; cursor: pointer; left: unset;\"></a>\r\n                        </div>\r\n                    </div>`).insertBefore(this.element);\r\n\r\n        this.addInplaceButtons();\r\n\r\n        this.setCascadeFrom(this.options.cascadeFrom);\r\n\r\n    }\r\n\r\n    protected addInplaceButtons(): void {\r\n        var self = this;\r\n\r\n        this.inplaceSearchButton = $('<a style=\"padding-top: 2px;\"><i class=\"fa fa-search\"></i></a>')\r\n            .addClass('inplace-button inplace-search align-center').attr('title', 'search')\r\n            .insertAfter(this.containerDiv)\r\n            .click(function (e) {\r\n                self.inplaceSearchClick(e);\r\n            });\r\n\r\n        this.inplaceViewButton = $('<a style=\"padding-top: 2px;\"><i class=\"fa fa-eye\"></i></a>')\r\n            .addClass('inplace-button inplace-view align-center').attr('title', 'view')\r\n            .click(function (e) {\r\n                self.inplaceViewClick(e);\r\n            })\r\n            .hide();\r\n\r\n        if (this.options.inplaceView != false && !this.options.multiple) {\r\n            this.inplaceViewButton.insertAfter(this.containerDiv);\r\n        }\r\n\r\n        this.clearSelectionButton = this.containerDiv.find('.select2-search-choice-close')\r\n            .click(e => {\r\n                this.value = '';\r\n                this.text = '';\r\n\r\n                this._selectedItem = null;\r\n                this.selectedItems = [];\r\n\r\n                $(e.target).hide();\r\n\r\n                this.element.trigger('change');\r\n                //this.element.triggerHandler('change');\r\n            })\r\n            .hide();\r\n\r\n    }\r\n\r\n    protected inplaceSearchClick(e: any): void {\r\n        this.options.preSelectedKeys = this.values;\r\n        var pickerDialog = new GridItemPickerDialog(this.options);\r\n\r\n        pickerDialog.onSuccess = (selectedItems: any[]) => {\r\n            this.value = pickerDialog.checkGrid.rowSelection.getSelectedKeys().join(',');\r\n            this.text = selectedItems.map(m => m[this.options.nameFieldInGridRow]).join(', ');\r\n\r\n            if (Q.isEmptyOrNull(this.text)) {\r\n                console.warn('nameFieldInGridRow might be wrong in ' + this.widgetName);\r\n            }\r\n\r\n            this._selectedItem = selectedItems[0];\r\n            this.selectedItems = selectedItems;\r\n\r\n            this.element.trigger('change');\r\n            //this.element.triggerHandler('change');\r\n\r\n        }\r\n        pickerDialog.dialogOpen();\r\n\r\n    }\r\n\r\n    protected inplaceViewClick(e: any): void {\r\n        var val = this.value;\r\n\r\n        if (!Q.isEmptyOrNull(val)) {\r\n            var dlg = this.getDialogInstance();\r\n            dlg.isReadOnly = true;\r\n            dlg.loadByIdAndOpenDialog(val, false);\r\n        }\r\n    }\r\n\r\n    private getDialogInstance(): DialogBase<any, any> {\r\n        var dialogType = this.options.dialogType;\r\n\r\n        if (!dialogType.prototype)\r\n            dialogType = Q.getType(this.options.dialogType);\r\n\r\n        try {\r\n            var dlg = new dialogType() as DialogBase<any, any>;\r\n            return dlg;\r\n        } catch (ex) {\r\n            console.warn('Could not intialize ' + this.options.dialogType);\r\n        }\r\n    }\r\n\r\n    public get value(): string {\r\n        let editVal = this.element.val();\r\n        return editVal;\r\n    }\r\n\r\n    public set value(val: string) {\r\n        this.element.val(val);\r\n\r\n        if (Q.isEmptyOrNull(val)) {\r\n            this.text = '';\r\n            this.inplaceViewButton.hide()\r\n            this.clearSelectionButton.hide()\r\n        } else {\r\n            this.inplaceViewButton.show()\r\n            if (this.get_readOnly() == false)\r\n                this.clearSelectionButton.show()\r\n        }\r\n\r\n    }\r\n\r\n    public get values(): string[] {\r\n        let valCVS = this.value;\r\n        if (Q.isEmptyOrNull(valCVS))\r\n            return [];\r\n        else\r\n            return valCVS.split(',');\r\n    }\r\n\r\n    public set values(val: string[]) {\r\n        this.value = val.join(',');\r\n    }\r\n\r\n    public get text(): string {\r\n        let editVal = this.containerDiv.find('.display-text').text();\r\n        return editVal;\r\n    }\r\n\r\n    public set text(val: string) {\r\n        this.containerDiv.find('.display-text').text(val);\r\n    }\r\n\r\n    public getEditValue(property, target) {\r\n        if (this.options.multiple == true) {\r\n            target[property.name] = this.values;\r\n        } else {\r\n            target[property.name] = this.value;\r\n        }\r\n    }\r\n    public setEditValue(source, property) {\r\n        this.value = source[property.name];\r\n\r\n        let text = source[this.options.nameFieldInThisRow];\r\n        this.text = text;\r\n\r\n        if (source[property.name]) {\r\n            this._selectedItem = {};\r\n            this._selectedItem[this.options.idFieldInGridRow] = source[property.name];\r\n            this._selectedItem[this.options.nameFieldInGridRow] = text;\r\n        }\r\n    }\r\n\r\n    get_value() {\r\n        return this.value;\r\n    }\r\n\r\n    set_value(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    get_readOnly(): boolean {\r\n        return this.element.hasClass('readonly');\r\n    }\r\n    set_readOnly(value: boolean): void {\r\n        if (value) {\r\n            this.element.addClass('readonly');\r\n            this.containerDiv.addClass('select2-container-disabled');\r\n            this.inplaceSearchButton.addClass('disabled').hide();\r\n            this.clearSelectionButton.addClass('disabled').hide();\r\n        } else {\r\n            this.element.removeClass('readonly')\r\n            this.containerDiv.removeClass('select2-container-disabled');\r\n            this.inplaceSearchButton.removeClass('disabled').show();\r\n            this.clearSelectionButton.removeClass('disabled').show();\r\n        }\r\n    }\r\n\r\n    get_required(): boolean {\r\n        return this.element.hasClass('required');\r\n    }\r\n    set_required(value: boolean): void {\r\n        if (value) {\r\n            this.element.addClass('required');\r\n            this.containerDiv.addClass('required');\r\n            this.containerDiv.find('.select2-choice, display-text').addClass('required');\r\n        } else {\r\n            this.element.removeClass('required');\r\n            this.containerDiv.removeClass('required');\r\n            this.containerDiv.find('.select2-choice, display-text').removeClass('required');\r\n        }\r\n    }\r\n\r\n\r\n    private _selectedItem;\r\n    public selectedItemIncludeColumns: string[] = [];\r\n\r\n    public get selectedItem() {\r\n        if (this._selectedItem\r\n            && this._selectedItem[this.options.nameFieldInGridRow]\r\n            && this.selectedItemIncludeColumns.every(e => this._selectedItem[e])\r\n        )\r\n            return this._selectedItem;\r\n        else if (!Q.isEmptyOrNull(this.value)) {\r\n\r\n            Q.serviceCall<Serenity.RetrieveResponse<any>>({\r\n                service: this.serviceUrl + '/Retrieve',\r\n                request: {\r\n                    EntityId: this.value,\r\n                    ColumnSelection: Serenity.RetrieveColumnSelection.list,\r\n                    IncludeColumns: this.selectedItemIncludeColumns\r\n                } as Serenity.RetrieveRequest,\r\n                async: false,\r\n                onSuccess: (response) => {\r\n                    this._selectedItem = response.Entity;\r\n                }\r\n            });\r\n\r\n            return this._selectedItem;\r\n        }\r\n    }\r\n\r\n    public selectedItems: any[];\r\n\r\n    private _serviceUrl: string;\r\n    get serviceUrl(): string {\r\n        if (Q.isEmptyOrNull(this._serviceUrl)) {\r\n            var dlg = this.getDialogInstance();\r\n            this._serviceUrl = dlg['getService']();\r\n        }\r\n        return this._serviceUrl;\r\n    }\r\n\r\n    setValueAndText(value, text) {\r\n        this.value = value;\r\n        this.text = text;\r\n    }\r\n\r\n    //-------------------------------cascading and filtering -----------------------------------\r\n    protected getCascadeFromValue(parent: Serenity.Widget<any>) {\r\n        return Serenity.EditorUtils.getValue(parent);\r\n    }\r\n\r\n    protected cascadeLink: Serenity.CascadedWidgetLink<Serenity.Widget<any>>;\r\n\r\n    protected setCascadeFrom(value: string) {\r\n\r\n        if (Q.isEmptyOrNull(value)) {\r\n            if (this.cascadeLink != null) {\r\n                this.cascadeLink.set_parentID(null);\r\n                this.cascadeLink = null;\r\n            }\r\n            (this.options as Serenity.Select2EditorOptions).cascadeFrom = null;\r\n            return;\r\n        }\r\n\r\n        this.cascadeLink = new Serenity.CascadedWidgetLink<Serenity.Widget<any>>(Serenity.Widget, this, p => {\r\n            this.set_cascadeValue(this.getCascadeFromValue(p));\r\n        });\r\n\r\n        this.cascadeLink.set_parentID(value);\r\n        (this.options as Serenity.Select2EditorOptions).cascadeFrom = value;\r\n    }\r\n\r\n    protected get_cascadeFrom(): string {\r\n        return (this.options as Serenity.Select2EditorOptions).cascadeFrom;\r\n    }\r\n\r\n    get cascadeFrom(): string {\r\n        return this.get_cascadeFrom();\r\n    }\r\n\r\n    protected set_cascadeFrom(value: string) {\r\n        if (value !== (this.options as Serenity.Select2EditorOptions).cascadeFrom) {\r\n            this.setCascadeFrom(value);\r\n            this.updateItems();\r\n        }\r\n    }\r\n\r\n    set cascadeFrom(value: string) {\r\n        this.set_cascadeFrom(value);\r\n    }\r\n\r\n    protected get_cascadeField() {\r\n        return Q.coalesce((this.options as Serenity.Select2EditorOptions).cascadeField, (this.options as Serenity.Select2EditorOptions).cascadeFrom);\r\n    }\r\n\r\n    get cascadeField(): string {\r\n        return this.get_cascadeField();\r\n    }\r\n\r\n    protected set_cascadeField(value: string) {\r\n        (this.options as Serenity.Select2EditorOptions).cascadeField = value;\r\n    }\r\n\r\n    set cascadeField(value: string) {\r\n        this.set_cascadeField(value);\r\n    }\r\n\r\n    protected get_cascadeValue(): any {\r\n        return (this.options as Serenity.Select2EditorOptions).cascadeValue;\r\n    }\r\n\r\n    get cascadeValue(): any {\r\n        return this.get_cascadeValue();\r\n    }\r\n\r\n    protected set_cascadeValue(value: any) {\r\n        if ((this.options as Serenity.Select2EditorOptions).cascadeValue !== value) {\r\n            (this.options as Serenity.Select2EditorOptions).cascadeValue = value;\r\n            this.set_value(null);\r\n            this.updateItems();\r\n\r\n        }\r\n    }\r\n\r\n    set cascadeValue(value: any) {\r\n        this.set_cascadeValue(value);\r\n    }\r\n\r\n    protected get_filterField() {\r\n        return (this.options as Serenity.Select2EditorOptions).filterField;\r\n    }\r\n\r\n    get filterField(): string {\r\n        return this.get_filterField();\r\n    }\r\n\r\n    protected set_filterField(value: string) {\r\n        (this.options as Serenity.Select2EditorOptions).filterField = value;\r\n    }\r\n\r\n    set filterField(value: string) {\r\n        this.set_filterField(value);\r\n    }\r\n\r\n    protected get_filterValue(): any {\r\n        return (this.options as Serenity.Select2EditorOptions).filterValue;\r\n    }\r\n\r\n    get filterValue(): any {\r\n        return this.get_filterValue();\r\n    }\r\n\r\n    protected set_filterValue(value: any) {\r\n        if ((this.options as Serenity.Select2EditorOptions).filterValue !== value) {\r\n            (this.options as Serenity.Select2EditorOptions).filterValue = value;\r\n            this.set_value(null);\r\n            this.updateItems();\r\n\r\n        }\r\n    }\r\n\r\n    set filterValue(value: any) {\r\n        this.set_filterValue(value);\r\n    }\r\n\r\n    protected updateItems() {\r\n    }\r\n\r\n}", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport * as q from \"../../_q/_q\"\r\nimport { GridBase } from \"../../Bases/GridBase\"\r\n\r\n@Serenity.Decorators.registerClass()\r\nexport class GridItemPickerDialog extends Serenity.TemplatedDialog<GridItemPickerEditorOptions> {\r\n    getTemplate() {\r\n        return `<div id=\"~_RowSelectionCheckGrid\" \r\n                class=\"RowSelectionCheckGrid ${this.options.multiple == true ? 'multi-select' : 'single-select'}\" \r\n                style = \"margin: 15px 15px 0 15px;\" >\r\n            </div>`\r\n    }\r\n\r\n    checkGrid: GridBase<any, GridItemPickerEditorOptions>;\r\n    get selectedItems() { return this.checkGrid.selectedItems }\r\n\r\n    constructor(options: GridItemPickerEditorOptions) {\r\n        super(options);\r\n\r\n        var gridType = options.gridType;\r\n\r\n        if (!gridType.prototype)\r\n            gridType = Q.getType(options.gridType);\r\n\r\n        try {\r\n            this.checkGrid = new gridType(this.byId(\"RowSelectionCheckGrid\"), options);\r\n            if (options.preSelectedKeys)\r\n                this.checkGrid.selectedKeys = options.preSelectedKeys;\r\n\r\n            this.dialogTitle = q.text('Controls.Select', \"Select\") + \" - \" + this.checkGrid.getTitle();\r\n            this.checkGrid.setTitle(null);\r\n            this.checkGrid.element.height(500);\r\n\r\n            this.checkGrid.pickerDialog = this;\r\n        } catch (ex) {\r\n            console.warn('Could not intialize ' + options.gridType);\r\n        }\r\n    }\r\n\r\n    onSuccess = (selectedItems) => { }\r\n\r\n    getDialogOptions() {\r\n        let opt = super.getDialogOptions();\r\n        opt.buttons = [{\r\n            text: Q.text(\"Dialogs.OkButton\"),\r\n            click: () => {\r\n                var selectedItems = this.checkGrid.selectedItems;\r\n                if (!selectedItems.length) {\r\n                    Q.notifyWarning(\"Please select some items!\");\r\n                    return\r\n                }\r\n                this.onSuccess(selectedItems);\r\n                this.dialogClose();\r\n            }\r\n        }, {\r\n            text: Q.text(\"Dialogs.CancelButton\"),\r\n            click: () => {\r\n                this.dialogClose()\r\n            }\r\n        }];\r\n\r\n        opt.height = 500;\r\n        return opt\r\n    }\r\n\r\n}\r\n", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\n\r\nexport * from \"./_q.array\"\r\nexport * from \"./_q.datetime\"\r\nexport * from \"./_q.editor-utils\"\r\nexport * from \"./_q.enum\"\r\nexport * from \"./_q.keyboard-layout\"\r\nexport * from \"./_q.var\"\r\n\r\nexport function text(key: string, fallback: string): string {\r\n    var result = Q.text(key);\r\n\r\n    if (result == key) return fallback;\r\n    else return result;\r\n}\r\n\r\nexport function isCosmicThemeApplied(): boolean {\r\n    return document.body.className.indexOf('cosmic') >= 0;\r\n}\r\n\r\nexport function getSelectedLanguage(): string {\r\n    var lang = document.getElementsByTagName('html')[0].getAttribute('lang');\r\n    return lang;\r\n}\r\n\r\nexport function isBanglaMode(): boolean {\r\n    var lang = document.getElementsByTagName('html')[0].getAttribute('lang');\r\n    if (lang) return lang.toLowerCase().indexOf('bn') >= 0;\r\n    return false;\r\n}\r\n\r\nexport function formatDecimal(value) {\r\n    let title = Serenity.NumberFormatter.format(value, '#,##0.00');\r\n    return title;\r\n}\r\n\r\nexport function formatInt(value) {\r\n    let title = Serenity.NumberFormatter.format(value, '#,##0');\r\n    return title;\r\n}\r\n\r\n// Check numeric or not then return value, if NAN then return zero(0)\r\nexport function ToNumber(value): number {\r\n    return isNaN(value) ? 0 : Number(value);\r\n}\r\n\r\nexport function ToFixed(value, fractionDigits = 2): string {\r\n    return ToNumber(value).toFixed(fractionDigits);\r\n}\r\n\r\nexport function ToBool(value) {\r\n    if (value == true || value == 'true' || value == 1 || value == \"1\") return true;\r\n    else if (value == false || value == 'false' || value == 0 || value == \"0\") return false;\r\n    else return null;\r\n}\r\n\r\n//colorDepth should be within '0123456789ABCDEF'\r\nexport function getRandomColor(hexLetters) {\r\n    var letters = hexLetters// '0123456789ABCDEF';\r\n\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n        var letterIndex = Math.floor((Math.random()) * letters.length);\r\n        if (letterIndex > 15) letterIndex = 15;\r\n        if (letterIndex < 0) letterIndex = 0;\r\n        color += letters[letterIndex];\r\n    }\r\n    return color;\r\n}\r\n\r\n", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport { DateTimePickerEditor } from \"../Editors/DateTimePickerEditor\"\r\nimport { TimeUoM } from \"../../ServerTypes/_Ext/TimeUoM\"\r\n\r\nexport function nextTick(date) {\r\n    return new Date(date.getTime() + 1);\r\n}\r\n\r\nexport function addMinutes(date: Date, minutes: number) {\r\n    return new Date(date.getTime() + minutes * 60000);\r\n}\r\n\r\nexport function addHours(date: Date, hours: number) {\r\n    return new Date(date.getTime() + hours * 3600000);\r\n}\r\n\r\nexport function getHours(fromDate: Date, toDate: Date): number {\r\n    let hours = 0;\r\n    if (fromDate && toDate) {\r\n        let totalMiliSeconds = toDate.valueOf() - fromDate.valueOf();\r\n        hours = totalMiliSeconds / (1000 * 60 * 60);\r\n    }\r\n    return hours;\r\n}\r\n\r\nexport function getDays24HourPulse(fromDate: Date, toDate: Date): number {\r\n\r\n    let days = getHours(fromDate, toDate) / 24;\r\n\r\n    return Math.ceil(days);\r\n}\r\n\r\nexport function getDays(pFromDate: Date, pToDate: Date): number {\r\n    if (!pFromDate || !pToDate) return 1;\r\n\r\n    let fromDate = new Date(pFromDate.getFullYear(), pFromDate.getMonth(), pFromDate.getDate());\r\n    let toDate = new Date(pToDate.getFullYear(), pToDate.getMonth(), pToDate.getDate(), 23, 59, 59);\r\n\r\n    let days = getHours(fromDate, toDate) / 24;\r\n\r\n    return Math.ceil(days);\r\n}\r\n\r\nexport function getMonths(fromDate: Date, toDate: Date): number {\r\n    let months = getDays24HourPulse(fromDate, toDate) / 30;\r\n    return Math.ceil(months);\r\n}\r\n\r\nexport function getCalenderMonths(fromDate: Date, toDate: Date): number {\r\n    let months;\r\n    months = (toDate.getFullYear() - fromDate.getFullYear()) * 12;\r\n    months -= fromDate.getMonth();\r\n    months += toDate.getMonth();\r\n    return months <= 0 ? 0 : months;\r\n}\r\n\r\nexport function getCalenderMonthsCeil(fromDate: Date, toDate: Date): number {\r\n    let months = getCalenderMonths(fromDate, toDate);\r\n    return months == 0 ? 1 : months;\r\n}\r\n\r\nexport function addDays(date: Date, days: number): Date {\r\n    var result = new Date(date as any);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n}\r\n\r\n\r\nexport function addMonths(date: Date, months: number): Date {\r\n    var result = new Date(date as any);\r\n    result.setMonth(result.getMonth() + months);\r\n    return result;\r\n}\r\n\r\nexport function addYear(date: Date, years: number): Date {\r\n    var result = new Date(date as any);\r\n    result.setFullYear(result.getFullYear() + years);\r\n    return result;\r\n}\r\n\r\nexport function getPeriods(fromDate: Date, toDate: Date, periodUnit: TimeUoM): number {\r\n    if (periodUnit == TimeUoM.Day) {\r\n        let days = getDays(fromDate, toDate);\r\n        return days;\r\n    }\r\n    else if (periodUnit == TimeUoM.Month) {\r\n        let months = getMonths(fromDate, toDate);\r\n        return months == 0 ? 1 : months;\r\n    }\r\n    else if (periodUnit == TimeUoM.CalenderMonth) {\r\n        let calenderMonths = getCalenderMonths(fromDate, toDate);\r\n        return calenderMonths + 1;\r\n    }\r\n}\r\n\r\nexport function addPeriod(date: Date, period: number, periodUnit: TimeUoM): Date {\r\n    var result = new Date(date as any);\r\n    if (periodUnit == TimeUoM.Day)\r\n        result.setDate(result.getDate() + period);\r\n    else if (periodUnit == TimeUoM.Month)\r\n        result.setMonth(result.getMonth() + period);\r\n    else if (periodUnit == TimeUoM.CalenderMonth) {\r\n        result.setDate(1);\r\n        result.setMonth(result.getMonth() + period);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function formatISODate(date: Date): string {\r\n    if (date) {\r\n        var offset = date.getTimezoneOffset();\r\n        var result = new Date(date.getTime() - offset * 60 * 1000);\r\n\r\n        return result.toISOString();\r\n    } else return null\r\n}\r\n\r\n//editor utils\r\n\r\nexport function bindDateTimeEditorChange(editor, handler): void {\r\n    editor.change(handler);\r\n    editor.element.closest('.field').find('.time').change(handler);\r\n    editor.element.closest('.field').find('.inplace-now').click(handler);\r\n}\r\n\r\nexport function setMinDate(editor: Serenity.DateEditor | Serenity.DateTimeEditor, value: Date): void {\r\n    editor.element.datepicker(\"option\", \"minDate\", value);\r\n    editor.set_minDate(value);\r\n}\r\n\r\nexport function setMaxDate(editor: Serenity.DateEditor | Serenity.DateTimeEditor, value: Date): void {\r\n    let date = new Date(value.getFullYear(), value.getMonth(), value.getDate() + 1);\r\n    date.setMilliseconds(-1);\r\n    editor.element.datepicker(\"option\", \"maxDate\", date);\r\n    editor.set_maxDate(date);\r\n}\r\n\r\nexport function initDateRangeEditor(fromDateEditor: Serenity.DateEditor, toDateEditor: Serenity.DateEditor, onChangeHandler?: (e: JQueryEventObject) => void): void {\r\n\r\n    var startDateTextBox = (<any>fromDateEditor.element);\r\n    var endDateTextBox = (<any>toDateEditor.element);\r\n\r\n    startDateTextBox.datepicker('option', 'onClose', function (dateText, inst) {\r\n        if (endDateTextBox.val() != '') {\r\n            var testStartDate = startDateTextBox.datepicker('getDate');\r\n            var testEndDate = endDateTextBox.datepicker('getDate');\r\n            if (testStartDate > testEndDate)\r\n                endDateTextBox.datepicker('setDate', testStartDate);\r\n        }\r\n        else {\r\n            endDateTextBox.val(dateText);\r\n        }\r\n    });\r\n\r\n    endDateTextBox.datepicker('option', 'minDate', startDateTextBox.datepicker('getDate'));\r\n    startDateTextBox.datepicker('option', 'onSelect', function (selectedDateTime) {\r\n        endDateTextBox.datepicker('option', 'minDate', startDateTextBox.datepicker('getDate'));\r\n        if (onChangeHandler) onChangeHandler(selectedDateTime);\r\n    });\r\n\r\n\r\n    endDateTextBox.datepicker('option', 'onClose', function (dateText, inst) {\r\n        if (startDateTextBox.val() != '') {\r\n            var testStartDate = startDateTextBox.datepicker('getDate');\r\n            var testEndDate = endDateTextBox.datepicker('getDate');\r\n            if (testStartDate > testEndDate)\r\n                startDateTextBox.datepicker('setDate', testEndDate);\r\n        }\r\n        else {\r\n            startDateTextBox.val(dateText);\r\n        }\r\n    });\r\n\r\n    startDateTextBox.datepicker('option', 'maxDate', endDateTextBox.datepicker('getDate'));\r\n    endDateTextBox.datepicker('option', 'onSelect', function (selectedDateTime) {\r\n        startDateTextBox.datepicker('option', 'maxDate', endDateTextBox.datepicker('getDate'));\r\n        if (onChangeHandler) onChangeHandler(selectedDateTime);\r\n    });\r\n\r\n    //to fire change event on keyboard input\r\n    if (onChangeHandler) {\r\n        setTimeout(() => {\r\n            fromDateEditor.change(onChangeHandler);\r\n\r\n            toDateEditor.change(onChangeHandler);\r\n        }, 500);\r\n    }\r\n}\r\n\r\nexport function initDateTimeRangeEditor(fromDateTimeEditor: DateTimePickerEditor, toDateTimeEditor: DateTimePickerEditor, onChangeHandler?: (e: JQueryEventObject) => void): void {\r\n    //fromDateTimeEditor.destroy();\r\n    //toDateTimeEditor.destroy();\r\n\r\n\r\n    var startDateTextBox = (<any>fromDateTimeEditor.element);\r\n    var endDateTextBox = (<any>toDateTimeEditor.element);\r\n\r\n    //startDateTextBox.datetimepicker('option', 'timeFormat', 'HH:mm z')\r\n    startDateTextBox.datetimepicker('option', 'onClose', function (dateText, inst) {\r\n        if (endDateTextBox.val() != '') {\r\n            var testStartDate = startDateTextBox.datetimepicker('getDate');\r\n            var testEndDate = endDateTextBox.datetimepicker('getDate');\r\n            if (testStartDate > testEndDate)\r\n                endDateTextBox.datetimepicker('setDate', testStartDate);\r\n        }\r\n        else {\r\n            endDateTextBox.val(dateText);\r\n        }\r\n    });\r\n\r\n    endDateTextBox.datetimepicker('option', 'minDate', startDateTextBox.datetimepicker('getDate'));\r\n    startDateTextBox.datetimepicker('option', 'onSelect', function (selectedDateTime) {\r\n        endDateTextBox.datetimepicker('option', 'minDate', startDateTextBox.datetimepicker('getDate'));\r\n        if (onChangeHandler) onChangeHandler(selectedDateTime);\r\n    });\r\n\r\n\r\n    //endDateTextBox.datetimepicker('option', 'timeFormat', 'HH:mm z')\r\n    endDateTextBox.datetimepicker('option', 'onClose', function (dateText, inst) {\r\n        if (startDateTextBox.val() != '') {\r\n            var testStartDate = startDateTextBox.datetimepicker('getDate');\r\n            var testEndDate = endDateTextBox.datetimepicker('getDate');\r\n            if (testStartDate > testEndDate)\r\n                startDateTextBox.datetimepicker('setDate', testEndDate);\r\n        }\r\n        else {\r\n            startDateTextBox.val(dateText);\r\n        }\r\n    });\r\n\r\n    startDateTextBox.datetimepicker('option', 'maxDate', endDateTextBox.datetimepicker('getDate'));\r\n    endDateTextBox.datetimepicker('option', 'onSelect', function (selectedDateTime) {\r\n        startDateTextBox.datetimepicker('option', 'maxDate', endDateTextBox.datetimepicker('getDate'));\r\n        if (onChangeHandler) onChangeHandler(selectedDateTime);\r\n    });\r\n\r\n    //to fire change event on keyboard input\r\n    if (onChangeHandler) {\r\n        setTimeout(() => {\r\n            fromDateTimeEditor.change(onChangeHandler);\r\n\r\n            toDateTimeEditor.change(onChangeHandler);\r\n        }, 500);\r\n    }\r\n}\r\n\r\nexport function formatDate(d: Date | string, format?: string) {\r\n    if (!d) {\r\n        return '';\r\n    }\r\n\r\n    let date: Date;\r\n    if (typeof d == \"string\") {\r\n        var res = Q.parseDate(d);\r\n        if (!res)\r\n            return d;\r\n        date = res as Date;\r\n    }\r\n    else\r\n        date = d;\r\n\r\n    if (format == null || format == \"d\") {\r\n        format = Q.Culture.dateFormat;\r\n    }\r\n    else {\r\n        switch (format) {\r\n            case \"g\": format = Q.Culture.dateTimeFormat.replace(\":ss\", \"\"); break;\r\n            case \"G\": format = Q.Culture.dateTimeFormat; break;\r\n            case \"s\": format = \"yyyy-MM-ddTHH:mm:ss\"; break;\r\n            case \"u\": return Q.formatISODateTimeUTC(date);\r\n        }\r\n    }\r\n\r\n    let pad = function (i: number) {\r\n        return Q.zeroPad(i, 2);\r\n    };\r\n\r\n    return format.replace(new RegExp('dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|fff|zz?z?|\\\\/', 'g'),\r\n        function (fmt): any {\r\n            var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n            switch (fmt) {\r\n                case '/': return Q.Culture.dateSeparator;\r\n                case 'hh': return pad(((date.getHours() < 13) ? date.getHours() : (date.getHours() - 12)));\r\n                case 'h': return ((date.getHours() < 13) ? date.getHours() : (date.getHours() - 12));\r\n                case 'HH': return pad(date.getHours());\r\n                case 'H': return date.getHours();\r\n                case 'mm': return pad(date.getMinutes());\r\n                case 'm': return date.getMinutes();\r\n                case 'ss': return pad(date.getSeconds());\r\n                case 's': return date.getSeconds();\r\n                case 'yyyy': return date.getFullYear();\r\n                case 'yy': return date.getFullYear().toString().substr(2, 4);\r\n                case 'dddd': return days[date.getDay()];\r\n                case 'ddd': return days[date.getDay()].substr(0, 3);\r\n                case 'dd': return pad(date.getDate());\r\n                case 'd': return date.getDate().toString();\r\n                case 'MMMM': return months[date.getMonth()];\r\n                case 'MMM': return months[date.getMonth()].substr(0, 3);\r\n                case 'MM': return pad(date.getMonth() + 1);\r\n                case 'M': return date.getMonth() + 1;\r\n                case 't': return ((date.getHours() < 12) ? 'A' : 'P');\r\n                case 'tt': return ((date.getHours() < 12) ? 'AM' : 'PM');\r\n                case 'fff': return Q.zeroPad(date.getMilliseconds(), 3);\r\n                case 'zzz':\r\n                case 'zz':\r\n                case 'z': return '';\r\n                default: return fmt;\r\n            }\r\n        }\r\n    );\r\n}", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport { DialogBase } from \"../Bases/DialogBase\"\r\nimport { GridEditorBase } from \"../Editors/GridEditorBase\"\r\n\r\nexport function initDetailEditor(dialog: DialogBase<any, any>, editor: GridEditorBase<any>, options: ExtGridEditorOptions = {}): void {\r\n\r\n    if (options.showCaption != true) {\r\n        editor.element.siblings('.caption').hide();\r\n    }\r\n    if (options.hideToolbar == true) {\r\n        editor.element.find('.grid-toolbar').hide()\r\n    }\r\n    if (options.isReadOnly == true) {\r\n        editor.set_readOnly(options.isReadOnly);\r\n    }\r\n    editor.parentDialog = dialog;\r\n\r\n    dialog.onAfterSetDialogSize = () => {\r\n        let $gridContainer = editor.element.find('.grid-container');\r\n\r\n        if (options.height) {\r\n            editor.slickGrid.setOptions({ autoHeight: false });\r\n            $gridContainer.height(options.height);\r\n\r\n        } else if (options.autoHeight) {\r\n            let top = $gridContainer.position().top;\r\n            let height = dialog.element.innerHeight() - top - 40;\r\n\r\n            if (height > 200)\r\n                $gridContainer.height(height);\r\n\r\n        }\r\n\r\n        if (options.width) {\r\n            $gridContainer.width(options.width);\r\n\r\n        }\r\n\r\n        editor.slickGrid.resizeCanvas();\r\n\r\n    }\r\n}\r\n\r\nexport function setGridEditorHeight(editor: JQuery, heightInPx: number) {\r\n    editor.css('height', heightInPx + 'px');\r\n    editor.find('.grid-container')\r\n        .css('height', (heightInPx - 25) + 'px')\r\n        .height(heightInPx);\r\n}\r\n\r\nexport function addNotificationIcon(editor: Serenity.Widget<any>, isSuccess: boolean): void {\r\n\r\n    let isAddOnInitialized = editor.element.data('isAddOnInitialized');\r\n\r\n    if (isAddOnInitialized != true) {\r\n        editor.element.after('<span class=\"text text-danger\" style=\"padding:3px\"><i class=\"fa fa-times\"></i></span>');\r\n        editor.element.data('isAddOnInitialized', true);\r\n    }\r\n\r\n    if (isSuccess == true) {\r\n        editor.element.switchClass('bg-danger', 'bg-success')\r\n            .siblings('.text').switchClass('text-danger', 'text-success')\r\n            .children().switchClass('fa-times', 'fa-check');\r\n    } else {\r\n        editor.element.switchClass('bg-success', 'bg-danger')\r\n            .siblings('.text').switchClass('text-success', 'text-danger')\r\n            .children().switchClass('fa-check', 'fa-times');\r\n\r\n    }\r\n}\r\n\r\nexport function addPopoverIcon(editor: Serenity.Widget<any>, isSuccess: boolean, popoverOptions: any): void { // popoverOptions: Bootstrap.PopoverOptions\r\n    addNotificationIcon(editor, isSuccess);\r\n\r\n    //(editor.element as any).popover('destroy');\r\n    (editor.element.siblings('.text') as any).popover('destroy');\r\n\r\n    setTimeout(h => {\r\n        //(editor.element as any).popover(popoverOptions);\r\n        (editor.element.siblings('.text') as any)\r\n            .popover(popoverOptions)\r\n            .on(\"show.bs.popover\", function () { $(this).data(\"bs.popover\").tip().css(\"width\", \"600px\"); });;\r\n    }, 100)\r\n\r\n}\r\n\r\nexport function setEditorLabel(editor: Serenity.Widget<any>, value: string) {\r\n\r\n    editor.element.siblings('label').text(value);\r\n}\r\n\r\nexport function hideEditorLabel(editor: Serenity.Widget<any>) {\r\n\r\n    editor.element.siblings('label').hide();\r\n}\r\n\r\nexport function setEditorCategoryLabel(editor: Serenity.Widget<any>, value: string) {\r\n    let categoryAnchor = editor.element.closest('.category').find('.category-anchor');\r\n    categoryAnchor.text(value);\r\n\r\n    let categoryAnchorName = categoryAnchor.attr('name');\r\n    categoryAnchor.closest('.s-PropertyGrid').find(`a[href='#${categoryAnchorName}']`).text(value);\r\n}\r\n\r\nexport function hideEditorCategory(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    if (value == true)\r\n        editor.element.closest('.category').hide();\r\n    else\r\n        editor.element.closest('.category').show();\r\n\r\n    let categoryAnchor = editor.element.closest('.category').find('.category-anchor');\r\n\r\n    let categoryAnchorName = categoryAnchor.attr('name');\r\n    if (value == true)\r\n        categoryAnchor.closest('.s-PropertyGrid').find(`a[href='#${categoryAnchorName}']`).hide();\r\n    else\r\n        categoryAnchor.closest('.s-PropertyGrid').find(`a[href='#${categoryAnchorName}']`).show();\r\n}\r\n\r\nexport function hideCategories(containerElement: JQuery, value: boolean = true) {\r\n    if (value == true)\r\n        containerElement.find('.category').hide();\r\n    else\r\n        containerElement.find('.category').show();\r\n\r\n    let categoryAnchor = containerElement.find('.category').find('.category-anchor');\r\n\r\n    let categoryAnchorName = categoryAnchor.attr('name');\r\n    if (value == true)\r\n        categoryAnchor.closest('.s-PropertyGrid').find(`a[href='#${categoryAnchorName}']`).hide();\r\n    else\r\n        categoryAnchor.closest('.s-PropertyGrid').find(`a[href='#${categoryAnchorName}']`).show();\r\n}\r\n\r\nexport function hideFields(containerElement: JQuery, value: boolean = true) {\r\n    if (value == true)\r\n        containerElement.find('.field').hide();\r\n    else\r\n        containerElement.find('.field').show();\r\n}\r\n\r\nexport function hideFieldsAndCategories(containerElement: JQuery, value: boolean = true) {\r\n    hideFields(containerElement);\r\n    hideCategories(containerElement);\r\n}\r\n\r\nexport function hideField(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    if (editor) {\r\n        if (value == true)\r\n            editor.element.closest('.field').hide();\r\n        else\r\n            editor.element.closest('.field').show();\r\n    }\r\n}\r\nexport function showField(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    if (editor) {\r\n        if (value == true)\r\n            editor.element.closest('.field').show();\r\n        else\r\n            editor.element.closest('.field').hide();\r\n    }\r\n}\r\n\r\nexport function showAndEnableField(editor: Serenity.Widget<any>) {\r\n    showField(editor);\r\n    Serenity.EditorUtils.setReadOnly(editor, false);\r\n\r\n}\r\n\r\nexport function showFieldAndCategory(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    showField(editor, value);\r\n    if (value == true)\r\n        hideEditorCategory(editor, false);\r\n}\r\n\r\nexport function hideEditorTab(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    if (value) {\r\n        let tabId = editor.element.closest('.tab-pane').hide().attr('id');\r\n        let tabAnchor = editor.element.closest('.s-PropertyGrid').find(`a[href='#${tabId}']`);\r\n        tabAnchor.closest('li').hide();\r\n    } else {\r\n        let tabId = editor.element.closest('.tab-pane').show().attr('id');\r\n        let tabAnchor = editor.element.closest('.s-PropertyGrid').find(`a[href='#${tabId}']`);\r\n        tabAnchor.closest('li').show();\r\n    }\r\n}\r\n\r\nexport function disableEditorTab(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    let tabId = editor.element.closest('.tab-pane').attr('id');\r\n\r\n    let tabAnchor = editor.element.closest('.s-PropertyGrid').find(`a[href='#${tabId}']`);\r\n    let tabLi = tabAnchor.closest('li');\r\n\r\n    if (value == true) {\r\n        tabAnchor.hide();\r\n        tabLi.closest('li').addClass('disabled').prepend(`<a class=\"disabled\">${tabAnchor.text()}</label>`);\r\n    } else {\r\n        tabAnchor.show();\r\n        tabLi.closest('li').removeClass('disabled').find('.disabled').remove();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function readOnlyEditorTab(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    let $editors = editor.element.closest('.tab-pane').find('.editor');\r\n\r\n    Serenity.EditorUtils.setReadonly($editors, value);\r\n}\r\n\r\nexport function readOnlyEditorCategory(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    let $editors = editor.element.closest('.category').find('.editor');\r\n\r\n    Serenity.EditorUtils.setReadonly($editors, value);\r\n}\r\nexport function readonlyEditorCategory($editor: JQuery, value: boolean = true) {\r\n    let $editors = $editor.closest('.category').find('.editor');\r\n    Serenity.EditorUtils.setReadonly($editors, value);\r\n}\r\n\r\nexport function readOnlyEditorPropertyGrid(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    let $propertyGrid = editor.element.closest('.s-PropertyGrid');\r\n    let $editors = $propertyGrid.find('.editor');\r\n    Serenity.EditorUtils.setReadonly($editors, value);\r\n    Serenity.EditorUtils.setContainerReadOnly($propertyGrid, value);\r\n}\r\nexport function readonlyEditorPropertyGrid($editor: JQuery, value: boolean = true) {\r\n    let $propertyGrid = $editor.closest('.s-PropertyGrid');\r\n    let $editors = $propertyGrid.find('.editor');\r\n    Serenity.EditorUtils.setReadonly($editors, value);\r\n    Serenity.EditorUtils.setContainerReadOnly($propertyGrid, value);\r\n}\r\n\r\nexport function readOnlyEditor(editor: Serenity.Widget<any>, value: boolean = true) {\r\n    Serenity.EditorUtils.setReadOnly(editor, value);\r\n}\r\n\r\nexport function readonlyEditor($editor: JQuery, value: boolean = true) {\r\n    Serenity.EditorUtils.setReadonly($editor, value);\r\n}\r\n\r\nexport function moveEditorFromTab(editor: Serenity.Widget<any>, toElement: JQuery, isPrepend = false) {\r\n    let fieldDiv = editor.element.closest('.field');\r\n\r\n    if (isPrepend == true)\r\n        fieldDiv.prependTo(toElement);\r\n    else\r\n        fieldDiv.appendTo(toElement);\r\n}\r\n\r\nexport function moveEditorCategoryFromTab(editor: Serenity.Widget<any>, toElement: JQuery, isPrepend = false) {\r\n    let fieldDiv = editor.element.closest('.field');\r\n    let categoryDiv = editor.element.closest('.category');\r\n\r\n    if (isPrepend == true)\r\n        categoryDiv.prependTo(toElement);\r\n    else\r\n        categoryDiv.appendTo(toElement);\r\n\r\n    //hide category navigation link\r\n    let categoryAnchor = categoryDiv.find('.category-anchor');\r\n    let categoryAnchorName = categoryAnchor.attr('name');\r\n    categoryAnchor.closest('.s-PropertyGrid').find(`a[href='#${categoryAnchorName}']`).hide();\r\n\r\n}\r\n\r\nexport function selectEditorTab(editor: Serenity.Widget<any>) {\r\n    let tabId = editor.element.closest('.tab-pane').attr('id');\r\n\r\n    let tabAnchor = editor.element.closest('.s-PropertyGrid').find(`a[href='#${tabId}']`);\r\n\r\n    (tabAnchor as any).tab('show');\r\n}\r\n", "import * as Serenity from \"@serenity-is/corelib\"\r\n\r\nexport function getEnumText(enumTypeOrKey, value) {\r\n    let enumKey = enumTypeOrKey.__typeName ? enumTypeOrKey.__typeName : enumTypeOrKey;\r\n    let title = Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), value);\r\n    return title;\r\n}\r\n\r\nexport function isNumber(value): boolean {\r\n    return !isNaN(Number(value))\r\n}\r\n\r\nexport function getEnumValues(enumType): number[] {\r\n    let items: number[] = [];\r\n    for (let item in enumType) {\r\n        if (isNumber(item)) {\r\n            items.push(Number(item));\r\n        }\r\n    }\r\n\r\n    return items;\r\n}\r\n\r\nexport function getEnumKeys(enumType): string[] {\r\n    return getEnumValues(enumType).map(m => enumType[m]);\r\n}\r\n", "export function switchKeybordLayout($container, layout) {\r\n    let writing_fields = $container.find('.bangla-only, .s-QuickSearchInput, .s-StringEditor, .s-TextAreaEditor, .select2-input').filter(function () {\r\n        return $(this).closest('.english-only,.do-not-change-ANSI-font').length == 0;\r\n    });\r\n\r\n    if (layout == 'phonetic') {\r\n        writing_fields.bnKb({\r\n            'switchkey': {\r\n                'webkit': '7',\r\n                'mozilla': '7',\r\n                'msie': '7'\r\n            },\r\n            'driver': window['phonetic']\r\n        });\r\n    } else if (layout == 'probhat') {\r\n        writing_fields.bnKb({\r\n            'switchkey': {\r\n                'webkit': '8',\r\n                'mozilla': '8',\r\n                'msie': '8'\r\n            },\r\n            'driver': window['probhat']\r\n        });\r\n    } else if (layout == 'unijoy') {\r\n        writing_fields.bnKb({\r\n            'switchkey': {\r\n                'webkit': '9',\r\n                'mozilla': '9',\r\n                'msie': '9'\r\n            },\r\n            'driver': window['unijoy']\r\n        });\r\n    } else if (layout == 'english') {\r\n        writing_fields.bnKb.toggle();\r\n    } else {\r\n        writing_fields.bnKb({\r\n            'switchkey': {\r\n                'webkit': '7',\r\n                'mozilla': '7',\r\n                'msie': '7'\r\n            },\r\n            'driver': window['phonetic']\r\n        });\r\n    }\r\n}\r\n\r\n", "export var queryString = {};\r\nexport var jsPDFHeaderImageData: string = null\r\nexport var jsPDFHeaderTitle: string = 'Report Title';\r\nexport var ListExcelServiceMethodName: string = null;\r\nexport var useSerenityInlineEditors: boolean = true;\r\n\r\nexport var DefaultMainGridOptions: ExtGridOptions = {\r\n    AutoColumnSize: true,\r\n    FadeInEffectWhenInit: true,\r\n    ShowAnyInEqualityFilterWithTextValue: true,\r\n    ShowInlineActionsColumn: true,\r\n    ShowDeleteInlineButtun: false,\r\n    ShowEditInlineButtun: true,\r\n    ShowPrintInlineButtun: false,\r\n    ShowRowNumberColumn: true,\r\n    ShowRowSelectionCheckboxColumn: false,\r\n    EnableQuickSearch: true,\r\n    RowsPerPage: 20\r\n};\r\n\r\nexport var DefaultEditorGridOptions: ExtGridOptions = {\r\n    AutoColumnSize: true,\r\n    FadeInEffectWhenInit: true,\r\n    ShowAnyInEqualityFilterWithTextValue: true,\r\n    ShowInlineActionsColumn: true,\r\n    ShowDeleteInlineButtun: true,\r\n    ShowEditInlineButtun: true,\r\n    ShowPrintInlineButtun: false,\r\n    ShowRowSelectionCheckboxColumn: false,\r\n    ShowRowNumberColumn: true,\r\n    EnableQuickSearch: false\r\n};\r\n\r\nexport var DefaultEntityDialogOptions: ExtDialogOptions = {\r\n    AutoFitContentArea: true,\r\n    HideCategoyLinksBar: true,\r\n    PendingChangesConfirmation: true,\r\n    ShowSaveAndNewButtonInToolbar: false,\r\n    ShowCloseButtonInToolbar: false,\r\n    ShowRefreshButtonInToolbar: false,\r\n    ShowChangeLogButtonInToolbar: true,\r\n    ShowReplaceRowButtonInToolbar: false,\r\n    ShowKeyboardLayoutButtonInToolbar: false\r\n\r\n};\r\n\r\nexport var DefaultEditorDialogOptions: ExtDialogOptions = {\r\n    AutoFitContentArea: false,\r\n    HideCategoyLinksBar: true,\r\n    PendingChangesConfirmation: true,\r\n    ShowSaveAndNewButtonInToolbar: false,\r\n    ShowCloseButtonInToolbar: false,\r\n    ShowRefreshButtonInToolbar: false,\r\n    ShowChangeLogButtonInToolbar: false,\r\n    ShowReplaceRowButtonInToolbar: false,\r\n    ShowKeyboardLayoutButtonInToolbar: false,\r\n};\r\n\r\n//date time\r\nexport var fiscalYearMonths = [6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5]\r\n", "import * as Q from \"@serenity-is/corelib/q\"\r\n\r\nexport function loadScript(url) {\r\n    $.ajax({\r\n        url: url,\r\n        dataType: \"script\",\r\n        async: false,           // <-- This is the key\r\n        cache: true,\r\n        success: function () {\r\n            // all good...\r\n        },\r\n        error: function () {\r\n            throw new Error(\"Could not load script \" + url);\r\n        }\r\n    });\r\n}\r\n\r\nexport function loadCss(url, styleId) {\r\n    var style = $(\"#\" + styleId);\r\n    if (style.length > 0) {\r\n        return;\r\n    }\r\n\r\n    $(\"<link/>\")\r\n        .attr(\"type\", \"text/css\")\r\n        .attr(\"id\", styleId)\r\n        .attr(\"rel\", \"stylesheet\")\r\n        .attr(\"href\", Q.resolveUrl(url))\r\n        .appendTo(document.head);\r\n\r\n    var node = document.createElement(\"style\");\r\n    node.setAttribute(\"rel\", \"stylesheet\");\r\n    node.innerHTML = \".datepicker.dropdown-menu { font-family: unset; }\";\r\n    document.head.appendChild(node);\r\n}\r\n\r\nexport function usingVuejs() {\r\n    if (window['Vue']) {\r\n        return;\r\n    } else {\r\n        loadScript(Q.resolveUrl(\"~/Scripts/vue.js\"));\r\n\r\n        //filters\r\n        //window['Vue'].filter('formatDate', function (value, format) {\r\n        //    if (value) {\r\n        //        return Q.formatDate(value, format)\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('formatDateReadable', function (value) {\r\n        //    if (value) {\r\n        //        let date = Q.parseISODateTime(value);\r\n        //        return date.getDate() + ' ' + _Ext.Months[date.getMonth()].substr(0, 3) + ' ' + date.getFullYear();\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('dayOnly', function (value) {\r\n        //    if (value) {\r\n        //        return Q.formatDate(value, 'dd');\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('monthOnly', function (value) {\r\n        //    if (value) {\r\n        //        let date = Q.parseISODateTime(value);\r\n        //        return _Ext.Months[date.getMonth()];\r\n        //    }\r\n        //});\r\n        //window['Vue'].filter('monthOnly3', function (value) {\r\n        //    if (value) {\r\n        //        let date = Q.parseISODateTime(value);\r\n        //        return _Ext.Months[date.getMonth()].substr(0, 3);\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('yearOnly', function (value) {\r\n        //    if (value) {\r\n        //        let date = Q.parseISODateTime(value);\r\n        //        return date.getFullYear();\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('timeOnlyHHmm', function (value) {\r\n        //    if (value) {\r\n        //        return Q.formatDate(value, 'HH:mm');\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('formatDateTimeReadable', function (value) {\r\n        //    if (value) {\r\n        //        let date = Q.parseISODateTime(value);\r\n        //        return date.getDate() + ' ' + _Ext.Months[date.getMonth()] + ' ' + date.getFullYear()\r\n        //            + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('enumText', function (value, enumKey) {\r\n        //    if (value) {\r\n        //        return Serenity.EnumFormatter.format(Serenity.EnumTypeRegistry.get(enumKey), value);\r\n        //    }\r\n        //});\r\n\r\n        //window['Vue'].filter('truncate', function (text, length, clamp) {\r\n        //    clamp = clamp || '...';\r\n        //    length = length || 30;\r\n\r\n        //    if (text.length <= length) return text;\r\n\r\n        //    var tcText = text.slice(0, length - clamp.length);\r\n        //    var last = tcText.length - 1;\r\n\r\n\r\n        //    while (last > 0 && tcText[last] !== ' ' && tcText[last] !== clamp[0]) last -= 1;\r\n\r\n        //    // Fix for case when text dont have any `space`\r\n        //    last = last || length - clamp.length;\r\n\r\n        //    tcText = tcText.slice(0, last);\r\n\r\n        //    return tcText + clamp;\r\n        //});\r\n\r\n        //window['Vue'].filter('capitalize', function (value) {\r\n        //    if (!value) return ''\r\n        //    value = value.toString()\r\n        //    return value.charAt(0).toUpperCase() + value.toLowerCase().slice(1)\r\n        //});\r\n    }\r\n}\r\n\r\nexport function usingBootstrapDatePicker() {\r\n    if ($.fn['BSdatepicker']) {\r\n        return;\r\n    } else {\r\n        loadCss(\"~/Scripts/datepicker/datepicker3.css\", \"bootstrapdatepicker\");\r\n        loadScript(Q.resolveUrl(\"~/Scripts/datepicker/bootstrap-datepicker.js\"));\r\n\r\n        //localization\r\n        $.fn.datepicker['dates'].bn = {\r\n            days: [\"\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0\", \"\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0\", \"\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0\", \"\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0\", \"\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09B0\", \"\u09B6\u09C1\u0995\u09CD\u09B0\u09AC\u09BE\u09B0\", \"\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0\"],\r\n            daysShort: [\"\u09B0\u09AC\u09BF\", \"\u09B8\u09CB\u09AE\", \"\u09AE\u0999\u09CD\u0997\u09B2\", \"\u09AC\u09C1\u09A7\", \"\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\", \"\u09B6\u09C1\u0995\u09CD\u09B0\", \"\u09B6\u09A8\u09BF\"],\r\n            daysMin: [\"\u09B0\u09AC\u09BF\", \"\u09B8\u09CB\u09AE\", \"\u09AE\u0999\u09CD\u0997\u09B2\", \"\u09AC\u09C1\u09A7\", \"\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\", \"\u09B6\u09C1\u0995\u09CD\u09B0\", \"\u09B6\u09A8\u09BF\"],\r\n            months: [\"\u099C\u09BE\u09A8\u09C1\u09AF\u09BC\u09BE\u09B0\u09C0\", \"\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09AF\u09BC\u09BE\u09B0\u09BF\", \"\u09AE\u09BE\u09B0\u09CD\u099A\", \"\u098F\u09AA\u09CD\u09B0\u09BF\u09B2\", \"\u09AE\u09C7\", \"\u099C\u09C1\u09A8\", \"\u099C\u09C1\u09B2\u09BE\u0987\", \"\u0985\u0997\u09BE\u09B8\u09CD\u099F\", \"\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0\", \"\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0\", \"\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0\", \"\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0\"],\r\n            monthsShort: [\"\u099C\u09BE\u09A8\u09C1\", \"\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\", \"\u09AE\u09BE\u09B0\u09CD\u099A\", \"\u098F\u09AA\u09CD\u09B0\u09BF\u09B2\", \"\u09AE\u09C7\", \"\u099C\u09C1\u09A8\", \"\u099C\u09C1\u09B2\u09BE\u0987\", \"\u0985\u0997\u09BE\u09B8\u09CD\u099F\", \"\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\", \"\u0985\u0995\u09CD\u099F\u09CB\", \"\u09A8\u09AD\u09C7\", \"\u09A1\u09BF\u09B8\u09C7\"],\r\n            today: \"\u0986\u099C\", monthsTitle: \"\u09AE\u09BE\u09B8\", clear: \"\u09AA\u09B0\u09BF\u09B7\u09CD\u0995\u09BE\u09B0\",\r\n            weekStart: 0, format: \"mm/dd/yyyy\"\r\n        }\r\n\r\n        //to fix conflic with jQuery datepicker\r\n        if (!$.fn['BSdatepicker'] && $.fn.datepicker && $.fn.datepicker['noConflict']) {\r\n            var datepicker = $.fn.datepicker['noConflict']();\r\n            $.fn['BSdatepicker'] = datepicker;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function usingBootstrapColorPicker() {\r\n    if (window['colorpicker']) {\r\n        return;\r\n    } else {\r\n        loadCss(\"~/Scripts/colorpicker/bootstrap-colorpicker.min.css\", \"colorpicker\");\r\n        loadScript(Q.resolveUrl(\"~/Scripts/colorpicker/bootstrap-colorpicker.min.js\"))\r\n    }\r\n}\r\n\r\nexport function usingJqueryUITimepickerAddon() {\r\n    if (window['datetimepicker']) {\r\n        return;\r\n    } else {\r\n        loadCss(\"~/Content/jquery-ui-timepicker-addon.css\", \"datetimepicker\");\r\n        loadScript(Q.resolveUrl(\"~/Scripts/jquery-ui-timepicker-addon.js\"))\r\n    }\r\n}\r\n\r\nexport function usingChartjs() {\r\n    if (window['Chart']) {\r\n        return;\r\n    } else {\r\n        loadScript(Q.resolveUrl('~/Scripts/chartjs/Chart.min.js'))\r\n    }\r\n\r\n    window['Chart'].defaults.global.defaultFontFamily = $('body').css('font-family');\r\n    window['Chart'].defaults.global.maintainAspectRatio = false;\r\n    window['Chart'].defaults.global.tooltips.mode = 'index';\r\n}\r\n\r\n\r\nexport function usingSlickGridEditors() {\r\n    if (window['Slick'] && window['Slick']['Editors'] && window['Slick']['Editors']['Text']) {\r\n        return;\r\n    } else {\r\n        loadScript(Q.resolveUrl(\"~/lib/_Ext/Editors/slick.editors.js\"))\r\n    }\r\n}\r\n\r\nexport function usingSlickAutoColumnSize() {\r\n    if (window['Slick'] && window['Slick']['AutoColumnSize']) {\r\n        return;\r\n    } else {\r\n        loadScript(Q.resolveUrl(\"~/lib/_Ext/CustomSlickGridPlugin/slick.autocolumnsize.js\"))\r\n    }\r\n}\r\n\r\nexport function usingSlickHeaderFilters() {\r\n    if (window['Slick'] && window['Slick']['HeaderFilters']) {\r\n        return;\r\n    } else {\r\n        loadCss(\"~/lib/_Ext/CustomSlickGridPlugin/slick-headerfilters.css\", \"slick-headerfilters\");\r\n        loadScript(Q.resolveUrl(\"~/lib/_Ext/CustomSlickGridPlugin/slick.headerfilters.js\"));\r\n    }\r\n}", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport { GridBase } from \"./GridBase\"\r\nimport * as q from \"../_q/_q\"\r\nimport * as DialogUtils from \"../Utils/DialogUtils\"\r\n\r\n@Serenity.Decorators.responsive()\r\n@Serenity.Decorators.maximizable()\r\nexport class DialogBase<TEntity, TOptions> extends Serenity.EntityDialog<TEntity, TOptions> {\r\n    protected getRowType(): { idProperty?: string, localTextPrefix?: string, nameProperty?: string, insertPermission?: string, updatePermission?: string, deletePermission?: string, } { return {}; }\r\n    protected getIdProperty() { return this.getRowType().idProperty; }\r\n    protected getLocalTextPrefix() { return this.getRowType().localTextPrefix; }\r\n    protected getNameProperty() { return this.getRowType().nameProperty; }\r\n    protected getInsertPermission() { return this.getRowType().insertPermission; }\r\n    protected getUpdatePermission() { return this.getRowType().updatePermission; }\r\n    protected getDeletePermission() { return this.getRowType().deletePermission; }\r\n\r\n    protected get_ExtDialogOptions(): ExtDialogOptions { return Q.deepClone(q.DefaultEntityDialogOptions); }\r\n\r\n    protected loadedState: string;\r\n    isReadOnly: boolean = false;\r\n    protected form: any;\r\n\r\n    constructor(opt?) {\r\n        super(opt);\r\n        //this.element.fadeTo(0, 0);\r\n\r\n        if (this.get_ExtDialogOptions().PendingChangesConfirmation == true) {\r\n            DialogUtils.pendingChangesConfirmation(this.element, () => this.getSaveState() != this.loadedState);\r\n        }\r\n    }\r\n\r\n    protected updateInterface() {\r\n        super.updateInterface();\r\n\r\n        this.setReadOnly(this.isReadOnly);\r\n\r\n        //this.element.fadeTo(100, 1);\r\n    }\r\n\r\n    protected onDialogOpen() {\r\n        super.onDialogOpen();\r\n\r\n        if (this.get_ExtDialogOptions().AutoFitContentArea == true) {\r\n            this.fullContentArea();\r\n        }\r\n\r\n        if (this.get_ExtDialogOptions().HideCategoyLinksBar == true) {\r\n            this.element.find('.category-links').hide();\r\n\r\n            let $FirstCategory = this.element.find('.first-category > .category-title');\r\n\r\n            if (Q.isEmptyOrNull($FirstCategory.find('.category-anchor').text()))\r\n                $FirstCategory.hide();\r\n\r\n        }\r\n\r\n        if (this.get_ExtDialogOptions().ShowKeyboardLayoutButtonInToolbar == true) {\r\n            let $thisElement = this.element;\r\n\r\n            //if (q.isBanglaMode())\r\n            //    q.switchKeybordLayout($thisElement, 'phonetic')\r\n\r\n            this.toolbar.element.append(`<div class=\"dropdown pull-right\" style=\"padding: 5px 10px;\">\r\n                    <a href=\"#\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" title=\"${q.text('Controls.KeyboardLayout.Title', 'Keyboard Layout')}\">\r\n                        <i class=\"fa fa-keyboard-o\"></i> <span class=\"selected-layout\"> </span> <span class=\"caret\"></span>\r\n                    </a>\r\n                    <ul class=\"dropdown-menu dropdown-menu-right choose-keyboard\">\r\n                        <li class=\"dropdown-header\">${q.text('Controls.KeyboardLayout.Title', 'Keyboard Layout')}</li>\r\n                        <li data-kb=\"phonetic\"><a href=\"javascript:\"> ${q.text('Controls.KeyboardLayout.BanglaPhonetic', 'Bangla-Phonetic')}</a></li>\r\n                        <li data-kb=\"probhat\"><a href=\"javascript:\"> ${q.text('Controls.KeyboardLayout.BanglaProbhat', 'Bangla-Probhat')}</a></li>\r\n                        <li data-kb=\"unijoy\"><a href=\"javascript:\"> ${q.text('Controls.KeyboardLayout.BanglaUnijoy', 'Bangla-Unijoy')}</a></li>\r\n                        <li data-kb=\"english\"><a href=\"javascript:\"> ${q.text('Controls.KeyboardLayout.English', 'English')}</a></li>\r\n                    </ul>\r\n                </div>`);\r\n\r\n            let selected_layout_display_span = this.toolbar.element.find('.selected-layout');\r\n            let keyboard_choice_ul = this.toolbar.element.find('.choose-keyboard');\r\n            let keyboard_choice_li = keyboard_choice_ul.find('li');\r\n\r\n            keyboard_choice_li.on('click', function () {\r\n                let select_choice = $(this);\r\n                let selected_val = select_choice.data('kb');\r\n\r\n                if (selected_val) {\r\n                    selected_layout_display_span.text(select_choice.text());\r\n\r\n                    q.switchKeybordLayout($thisElement, selected_val);\r\n\r\n                    keyboard_choice_li.removeClass('active');\r\n                    keyboard_choice_ul.find('[data-kb=\"' + selected_val + '\"]').addClass('active');\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        //temporary fix for set grid editor height\r\n        setTimeout(() => { this.onAfterSetDialogSize(); }, 200)\r\n\r\n    }\r\n\r\n    protected onDialogClose() {\r\n        super.onDialogClose();\r\n\r\n        this.onAfterDialogClose(this.getSaveEntity());\r\n    }\r\n\r\n    protected setReadOnly(value: boolean) {\r\n        this.readOnly = value;\r\n        this.isReadOnly = value;\r\n\r\n        if (this.isReadOnly == true) {\r\n            this.saveAndCloseButton.toggleClass('disabled', this.isReadOnly);\r\n            this.applyChangesButton.toggleClass('disabled', this.isReadOnly);\r\n            this.deleteButton.toggleClass('disabled', this.isReadOnly);\r\n            this.cloneButton.toggleClass('disabled', this.isReadOnly);\r\n            this.undeleteButton.toggleClass('disabled', this.isReadOnly);\r\n            this.toolbar.findButton('btn-save-and-close').addClass('disabled');\r\n            this.toolbar.findButton('btn-save-and-new').addClass('disabled');\r\n            this.toolbar.findButton('btn-replace-row').addClass('disabled');\r\n            this.toolbar.findButton('btn-history').addClass('disabled');\r\n            this.toolbar.findButton('btn-custom').addClass('disabled');\r\n\r\n            // remove required asterisk (*)\r\n            this.element.find('sup').toggle(this.isReadOnly);\r\n            for (let editor in this.form) {\r\n                if (this.form[editor].widgetName) {\r\n\r\n                    try {\r\n                        Serenity.EditorUtils.setReadOnly(this.form[editor], this.isReadOnly);\r\n                    } catch { }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    protected getToolbarButtons(): Serenity.ToolButton[] {\r\n        let buttons = super.getToolbarButtons();\r\n        let extOptions = this.get_ExtDialogOptions();\r\n\r\n        if (extOptions.ShowSaveAndNewButtonInToolbar == true)\r\n            buttons.push({\r\n                title: q.text('Controls.EntityDialog.SaveAndNew', 'Save & New'),\r\n                icon: 'fa fa-save',\r\n                cssClass: 'btn-save-and-new',\r\n                onClick: () => {\r\n                    this.onSaveAndNewButtonClick();\r\n                }\r\n            });\r\n\r\n        if (extOptions.ShowCloseButtonInToolbar == true)\r\n            buttons.push({\r\n                title: q.text('Controls.EntityDialog.Close', 'Close'),\r\n                icon: 'fa fa-close',\r\n                cssClass: 'btn-close',\r\n                onClick: () => {\r\n                    this.dialogClose();\r\n                }\r\n            });\r\n\r\n        if (extOptions.ShowRefreshButtonInToolbar == true)\r\n            buttons.push({\r\n                title: q.text('Controls.EntityDialog.Refresh', 'Refresh'),\r\n                icon: 'fa fa-refresh',\r\n                onClick: () => {\r\n                    this.onRefreshClick();\r\n                }\r\n            });\r\n\r\n        try {\r\n            //if (extOptions.ShowReplaceRowButtonInToolbar == true && Q.Authorization.hasPermission('Administration:ReplaceRow')) {\r\n            //    if (Q.isEmptyOrNull(this.getService()) == false) {\r\n            //        buttons.push({\r\n            //            title: 'Replace',\r\n            //            icon: 'fa fa-trash-o',\r\n            //            cssClass: 'btn-replace-row',\r\n            //            onClick: () => {\r\n            //                let idProperty = this.getIdProperty();\r\n            //                let nameProperty = this.getNameProperty();\r\n            //                let entityId = this.entity[idProperty];\r\n            //                let entityName = this.entity[nameProperty];\r\n\r\n            //                if (entityId) {\r\n\r\n            //                    Q.serviceRequest(this.getService() + '/List', {}, (response: Serenity.ListResponse<any>) => {\r\n            //                        let entityList = response.Entities;\r\n\r\n            //                        let dlg = new ReplaceRowDialog({\r\n            //                            FormKey: this.getFormKey(),\r\n            //                            IdProperty: idProperty,\r\n            //                            NameProperty: nameProperty,\r\n            //                            EntityTypeTitle: this.getEntitySingular(),\r\n            //                            DeletedEntityName: entityName,\r\n            //                            DeletedEntityId: entityId,\r\n            //                        },\r\n            //                            entityList);\r\n\r\n            //                        dlg.dialogOpen();\r\n\r\n            //                        this.dialogClose();\r\n            //                    });\r\n            //                }\r\n            //            }\r\n            //        })\r\n            //    }\r\n\r\n\r\n            //}\r\n\r\n\r\n            //if (extOptions.ShowChangeLogButtonInToolbar == true && Q.Authorization.hasPermission('Administration:AuditLog')) {\r\n\r\n            //    buttons.push({\r\n            //        cssClass: 'btn-history',\r\n            //        icon: 'fa fa-history',\r\n            //        onClick: () => {\r\n            //            let entityId = this.entity[this.getIdProperty()];\r\n            //            if (entityId) {\r\n            //                let dlg = new AuditLogViewerDialog({ FormKey: this.getFormKey(), EntityId: entityId });\r\n\r\n            //                dlg.dialogOpen();\r\n            //            } else {\r\n            //                Q.alert('No change log found for this entity.')\r\n            //            }\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n            //clone button click event customization\r\n            let cloneButton = Q.tryFirst(buttons, x => x.cssClass == 'clone-button');\r\n\r\n            cloneButton.onClick = () => {\r\n\r\n                if (!this.isEditMode()) {\r\n                    return;\r\n                }\r\n\r\n                var cloneEntity = this.getCloningEntity();\r\n\r\n                Serenity.Widget.create({\r\n                    type: Q.getInstanceType(this),\r\n                    init: (dlg: DialogBase<any, any>) => {\r\n                        this.parentGrid.initDialog(dlg);\r\n                        dlg.loadEntityAndOpenDialog(cloneEntity, null);\r\n                    }\r\n                });\r\n\r\n                this.dialogClose();\r\n            }\r\n        } catch (e) { }\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected onRefreshClick() {\r\n        this.reloadById();\r\n    }\r\n\r\n    protected onSaveAndNewButtonClick() {\r\n        this.save(response => {\r\n            this.loadEntity({} as any);\r\n        });\r\n    }\r\n\r\n    protected getSaveState() {\r\n        try {\r\n            return $.toJSON(this.getSaveEntity());\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected onSaveSuccess(response) {\r\n        super.onSaveSuccess(response);\r\n        //Q.reloadLookup(this.getLookupKey());\r\n    }\r\n\r\n    loadResponse(data) {\r\n        super.loadResponse(data);\r\n\r\n        if (this.get_ExtDialogOptions().PendingChangesConfirmation == true) {\r\n            this.loadedState = this.getSaveState();\r\n        }\r\n    }\r\n\r\n    maximize() {\r\n        this.element.closest(\".ui-dialog\").find(\".ui-dialog-titlebar-maximize\").click();\r\n\r\n        setTimeout(() => {\r\n            let dialogElement = this.element ? this.element.closest(\".ui-dialog\") : $(\".ui-dialog\");\r\n\r\n            let dialogHeight = dialogElement.height();\r\n            let titleBarHeight = dialogElement.find('.ui-dialog-title').height() || 20;\r\n\r\n            let $categories = this.element.find('.categories');\r\n            let categoriesTop = $categories.position().top;\r\n\r\n            $categories.height(dialogHeight - titleBarHeight - categoriesTop - 20);\r\n\r\n        }, 100);\r\n\r\n    }\r\n\r\n    fullContentArea() {\r\n        this.setDialogSize();\r\n    }\r\n    // set the dialog size relative to content area (to shrink use negative value)\r\n    setDialogSize(width?, height?, top?, left?, $content?) {\r\n        if (!$content) {\r\n            $content = $('section.content');\r\n        }\r\n        if ($content.length == 0) {\r\n            $content = $('.content-wrapper');\r\n        }\r\n\r\n        let dialogElement = this.element ? this.element.closest(\".ui-dialog\") : $(\".ui-dialog\");\r\n\r\n        if ($content.length > 0 && dialogElement.length > 0) {\r\n\r\n            let dialogWidth = $content.width() + 30 + (width || 0);\r\n            let dialogHeight = $content.height() + (height || 30);\r\n\r\n            this.element.dialog(\"option\", \"width\", dialogWidth);\r\n            this.element.dialog(\"option\", \"height\", dialogHeight);\r\n\r\n            let titleBarHeight = dialogElement.find('.ui-dialog-title').height() || 20;\r\n\r\n            let $categories = this.element.find('.categories');\r\n            let categoriesTop = $categories.position().top;\r\n\r\n            $categories.height(dialogHeight - titleBarHeight - categoriesTop - 20);\r\n\r\n            dialogElement.css({\r\n                left: $content.position().left + (left || 0),\r\n                top: (top || 50),\r\n            });\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.onAfterSetDialogSize();\r\n        }, 200);\r\n\r\n    }\r\n\r\n    onAfterSetDialogSize() { }\r\n    onAfterDialogClose(entity: TEntity) { }\r\n\r\n    parentGrid: GridBase<TEntity, any>;\r\n}\r\n", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\nimport * as q from \"../_q/_q\"\r\n\r\nexport function pendingChangesConfirmation(element: JQuery, hasPendingChanges: () => boolean) {\r\n    element.on('dialogbeforeclose panelbeforeclose', function (e) {\r\n        if (!Serenity.WX.hasOriginalEvent(e) || !hasPendingChanges()) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n        Q.confirm(q.text('Controls.EntityDialog.PendingChangesConfirmation', 'You have pending changes. Save them?'),\r\n            () => element.find('div.save-and-close-button').click(),\r\n            {\r\n                onNo: function () {\r\n                    if (element.hasClass('ui-dialog-content'))\r\n                        element.dialog('close');\r\n                    else if (element.hasClass('s-Panel'))\r\n                        Serenity.TemplatedDialog.closePanel(element);\r\n                }\r\n            });\r\n    });\r\n}\r\n"],
  "mappings": "4EAAA,IAAAA,GAAAC,GAAA,CAAAC,GAAAC,IAAA,CAAAA,EAAO,QAAU,SAAS,aCC1B,IAAAC,EAA0B,SAC1BC,EAAmB,SCFnB,IAAAC,EAA0B,SAC1BC,EAAmB,SCDnB,IAAAC,EAA0B,SAC1BC,EAAmB,SCDnB,IAAAC,GAA0B,SAC1BC,EAAmB,SCAnB,IAAAC,EAAmB,SCDnB,IAAAC,GAA0B,SCA1B,IAAAC,EAA0B,SCAnB,SAASC,EAAoBC,EAAYC,EAAQ,CACpD,IAAIC,EAAiBF,EAAW,KAAK,uFAAuF,EAAE,OAAO,UAAY,CAC7I,OAAO,EAAE,IAAI,EAAE,QAAQ,wCAAwC,EAAE,QAAU,CAC/E,CAAC,EAEGC,GAAU,WACVC,EAAe,KAAK,CAChB,UAAa,CACT,OAAU,IACV,QAAW,IACX,KAAQ,GACZ,EACA,OAAU,OAAO,QACrB,CAAC,EACMD,GAAU,UACjBC,EAAe,KAAK,CAChB,UAAa,CACT,OAAU,IACV,QAAW,IACX,KAAQ,GACZ,EACA,OAAU,OAAO,OACrB,CAAC,EACMD,GAAU,SACjBC,EAAe,KAAK,CAChB,UAAa,CACT,OAAU,IACV,QAAW,IACX,KAAQ,GACZ,EACA,OAAU,OAAO,MACrB,CAAC,EACMD,GAAU,UACjBC,EAAe,KAAK,OAAO,EAE3BA,EAAe,KAAK,CAChB,UAAa,CACT,OAAU,IACV,QAAW,IACX,KAAQ,GACZ,EACA,OAAU,OAAO,QACrB,CAAC,CAET,CA5CgBC,EAAAJ,EAAA,uBCGT,IAAIK,EAAqC,KACrCC,EAAoC,GAEpCC,EAAyC,CAChD,eAAgB,GAChB,qBAAsB,GACtB,qCAAsC,GACtC,wBAAyB,GACzB,uBAAwB,GACxB,qBAAsB,GACtB,sBAAuB,GACvB,oBAAqB,GACrB,+BAAgC,GAChC,kBAAmB,GACnB,YAAa,EACjB,EAeO,IAAIC,EAA+C,CACtD,mBAAoB,GACpB,oBAAqB,GACrB,2BAA4B,GAC5B,8BAA+B,GAC/B,yBAA0B,GAC1B,2BAA4B,GAC5B,6BAA8B,GAC9B,8BAA+B,GAC/B,kCAAmC,EAEvC,ELlCO,SAASC,EAAKC,EAAaC,EAA0B,CACxD,IAAIC,EAAW,OAAKF,CAAG,EAEvB,OAAIE,GAAUF,EAAYC,EACdC,CAChB,CALgBC,EAAAJ,EAAA,QDJT,IAAMK,EAAN,cAA4C,iBAA6C,CAW5F,YAAYC,EAAsC,CAC9C,MAAMA,CAAO,EAsBjB,eAAYC,EAACC,GAAkB,CAAE,EAArB,aApBR,IAAIC,EAAWH,EAAQ,SAElBG,EAAS,YACVA,EAAa,UAAQH,EAAQ,QAAQ,GAEzC,GAAI,CACA,KAAK,UAAY,IAAIG,EAAS,KAAK,KAAK,uBAAuB,EAAGH,CAAO,EACrEA,EAAQ,kBACR,KAAK,UAAU,aAAeA,EAAQ,iBAE1C,KAAK,YAAgBI,EAAK,kBAAmB,QAAQ,EAAI,MAAQ,KAAK,UAAU,SAAS,EACzF,KAAK,UAAU,SAAS,IAAI,EAC5B,KAAK,UAAU,QAAQ,OAAO,GAAG,EAEjC,KAAK,UAAU,aAAe,IAClC,OAASC,EAAP,CACE,QAAQ,KAAK,uBAAyBL,EAAQ,QAAQ,CAC1D,CACJ,CA/BA,aAAc,CACV,MAAO;AAAA,+CACgC,KAAK,QAAQ,UAAY,GAAO,eAAiB;AAAA;AAAA,mBAG5F,CAGA,IAAI,eAAgB,CAAE,OAAO,KAAK,UAAU,aAAc,CA2B1D,kBAAmB,CACf,IAAIM,EAAM,MAAM,iBAAiB,EACjC,OAAAA,EAAI,QAAU,CAAC,CACX,KAAQ,OAAK,kBAAkB,EAC/B,MAAO,IAAM,CACT,IAAIJ,EAAgB,KAAK,UAAU,cACnC,GAAI,CAACA,EAAc,OAAQ,CACrB,gBAAc,2BAA2B,EAC3C,MACJ,CACA,KAAK,UAAUA,CAAa,EAC5B,KAAK,YAAY,CACrB,CACJ,EAAG,CACC,KAAQ,OAAK,sBAAsB,EACnC,MAAO,IAAM,CACT,KAAK,YAAY,CACrB,CACJ,CAAC,EAEDI,EAAI,OAAS,IACNA,CACX,CAEJ,EA5DaL,EAAAF,EAAA,wBAAAA,EAANQ,EAAA,CADG,aAAW,cAAc,GACtBR,GDCN,IAAMS,EAAN,cAA4C,QACkF,CAOjI,YAAYC,EAA0BC,EAAsC,CACxE,MAAMD,EAAWC,CAAO,EADU,aAAAA,EA8MtC,KAAO,2BAAuC,CAAC,EA3M3C,KAAK,QAAQ,SAAS,mBAAmB,EAEzC,KAAK,aAAe,EAAE,+DAA+DA,EAAQ,SAAW,0BAA4B;AAAA,sCACtGA,EAAQ,SAAW,kBAAoB;AAAA,sGACyBA,EAAQ,SAAW,qBAAuB;AAAA;AAAA;AAAA,2BAGrH,EAAE,aAAa,KAAK,OAAO,EAE9C,KAAK,kBAAkB,EAEvB,KAAK,eAAe,KAAK,QAAQ,WAAW,CAEhD,CAEU,mBAA0B,CAChC,IAAIC,EAAO,KAEX,KAAK,oBAAsB,EAAE,+DAA+D,EACvF,SAAS,4CAA4C,EAAE,KAAK,QAAS,QAAQ,EAC7E,YAAY,KAAK,YAAY,EAC7B,MAAM,SAAUC,EAAG,CAChBD,EAAK,mBAAmBC,CAAC,CAC7B,CAAC,EAEL,KAAK,kBAAoB,EAAE,4DAA4D,EAClF,SAAS,0CAA0C,EAAE,KAAK,QAAS,MAAM,EACzE,MAAM,SAAUA,EAAG,CAChBD,EAAK,iBAAiBC,CAAC,CAC3B,CAAC,EACA,KAAK,EAEN,KAAK,QAAQ,aAAe,IAAS,CAAC,KAAK,QAAQ,UACnD,KAAK,kBAAkB,YAAY,KAAK,YAAY,EAGxD,KAAK,qBAAuB,KAAK,aAAa,KAAK,8BAA8B,EAC5E,MAAMA,GAAK,CACR,KAAK,MAAQ,GACb,KAAK,KAAO,GAEZ,KAAK,cAAgB,KACrB,KAAK,cAAgB,CAAC,EAEtB,EAAEA,EAAE,MAAM,EAAE,KAAK,EAEjB,KAAK,QAAQ,QAAQ,QAAQ,CAEjC,CAAC,EACA,KAAK,CAEd,CAEU,mBAAmB,EAAc,CACvC,KAAK,QAAQ,gBAAkB,KAAK,OACpC,IAAIC,EAAe,IAAIC,EAAqB,KAAK,OAAO,EAExDD,EAAa,UAAaE,GAAyB,CAC/C,KAAK,MAAQF,EAAa,UAAU,aAAa,gBAAgB,EAAE,KAAK,GAAG,EAC3E,KAAK,KAAOE,EAAc,IAAIC,GAAKA,EAAE,KAAK,QAAQ,kBAAkB,CAAC,EAAE,KAAK,IAAI,EAE1E,gBAAc,KAAK,IAAI,GACzB,QAAQ,KAAK,wCAA0C,KAAK,UAAU,EAG1E,KAAK,cAAgBD,EAAc,CAAC,EACpC,KAAK,cAAgBA,EAErB,KAAK,QAAQ,QAAQ,QAAQ,CAGjC,EACAF,EAAa,WAAW,CAE5B,CAEU,iBAAiB,EAAc,CACrC,IAAII,EAAM,KAAK,MAEf,GAAI,CAAG,gBAAcA,CAAG,EAAG,CACvB,IAAIC,EAAM,KAAK,kBAAkB,EACjCA,EAAI,WAAa,GACjBA,EAAI,sBAAsBD,EAAK,EAAK,CACxC,CACJ,CAEQ,mBAA0C,CAC9C,IAAIE,EAAa,KAAK,QAAQ,WAEzBA,EAAW,YACZA,EAAe,UAAQ,KAAK,QAAQ,UAAU,GAElD,GAAI,CACA,IAAID,EAAM,IAAIC,EACd,OAAOD,CACX,OAASE,EAAP,CACE,QAAQ,KAAK,uBAAyB,KAAK,QAAQ,UAAU,CACjE,CACJ,CAEA,IAAW,OAAgB,CAEvB,OADc,KAAK,QAAQ,IAAI,CAEnC,CAEA,IAAW,MAAMH,EAAa,CAC1B,KAAK,QAAQ,IAAIA,CAAG,EAEd,gBAAcA,CAAG,GACnB,KAAK,KAAO,GACZ,KAAK,kBAAkB,KAAK,EAC5B,KAAK,qBAAqB,KAAK,IAE/B,KAAK,kBAAkB,KAAK,EACxB,KAAK,aAAa,GAAK,IACvB,KAAK,qBAAqB,KAAK,EAG3C,CAEA,IAAW,QAAmB,CAC1B,IAAII,EAAS,KAAK,MAClB,OAAM,gBAAcA,CAAM,EACf,CAAC,EAEDA,EAAO,MAAM,GAAG,CAC/B,CAEA,IAAW,OAAOJ,EAAe,CAC7B,KAAK,MAAQA,EAAI,KAAK,GAAG,CAC7B,CAEA,IAAW,MAAe,CAEtB,OADc,KAAK,aAAa,KAAK,eAAe,EAAE,KAAK,CAE/D,CAEA,IAAW,KAAKA,EAAa,CACzB,KAAK,aAAa,KAAK,eAAe,EAAE,KAAKA,CAAG,CACpD,CAEO,aAAaK,EAAUC,EAAQ,CAC9B,KAAK,QAAQ,UAAY,GACzBA,EAAOD,EAAS,IAAI,EAAI,KAAK,OAE7BC,EAAOD,EAAS,IAAI,EAAI,KAAK,KAErC,CACO,aAAaE,EAAQF,EAAU,CAClC,KAAK,MAAQE,EAAOF,EAAS,IAAI,EAEjC,IAAIG,EAAOD,EAAO,KAAK,QAAQ,kBAAkB,EACjD,KAAK,KAAOC,EAERD,EAAOF,EAAS,IAAI,IACpB,KAAK,cAAgB,CAAC,EACtB,KAAK,cAAc,KAAK,QAAQ,gBAAgB,EAAIE,EAAOF,EAAS,IAAI,EACxE,KAAK,cAAc,KAAK,QAAQ,kBAAkB,EAAIG,EAE9D,CAEA,WAAY,CACR,OAAO,KAAK,KAChB,CAEA,UAAUC,EAAe,CACrB,KAAK,MAAQA,CACjB,CAEA,cAAwB,CACpB,OAAO,KAAK,QAAQ,SAAS,UAAU,CAC3C,CACA,aAAaA,EAAsB,CAC3BA,GACA,KAAK,QAAQ,SAAS,UAAU,EAChC,KAAK,aAAa,SAAS,4BAA4B,EACvD,KAAK,oBAAoB,SAAS,UAAU,EAAE,KAAK,EACnD,KAAK,qBAAqB,SAAS,UAAU,EAAE,KAAK,IAEpD,KAAK,QAAQ,YAAY,UAAU,EACnC,KAAK,aAAa,YAAY,4BAA4B,EAC1D,KAAK,oBAAoB,YAAY,UAAU,EAAE,KAAK,EACtD,KAAK,qBAAqB,YAAY,UAAU,EAAE,KAAK,EAE/D,CAEA,cAAwB,CACpB,OAAO,KAAK,QAAQ,SAAS,UAAU,CAC3C,CACA,aAAaA,EAAsB,CAC3BA,GACA,KAAK,QAAQ,SAAS,UAAU,EAChC,KAAK,aAAa,SAAS,UAAU,EACrC,KAAK,aAAa,KAAK,+BAA+B,EAAE,SAAS,UAAU,IAE3E,KAAK,QAAQ,YAAY,UAAU,EACnC,KAAK,aAAa,YAAY,UAAU,EACxC,KAAK,aAAa,KAAK,+BAA+B,EAAE,YAAY,UAAU,EAEtF,CAMA,IAAW,cAAe,CACtB,GAAI,KAAK,eACF,KAAK,cAAc,KAAK,QAAQ,kBAAkB,GAClD,KAAK,2BAA2B,MAAM,GAAK,KAAK,cAAc,CAAC,CAAC,EAEnE,OAAO,KAAK,cACX,GAAI,CAAG,gBAAc,KAAK,KAAK,EAEhC,OAAE,cAA4C,CAC1C,QAAS,KAAK,WAAa,YAC3B,QAAS,CACL,SAAU,KAAK,MACf,gBAA0B,0BAAwB,KAClD,eAAgB,KAAK,0BACzB,EACA,MAAO,GACP,UAAYC,GAAa,CACrB,KAAK,cAAgBA,EAAS,MAClC,CACJ,CAAC,EAEM,KAAK,aAEpB,CAKA,IAAI,YAAqB,CACrB,GAAM,gBAAc,KAAK,WAAW,EAAG,CACnC,IAAIT,EAAM,KAAK,kBAAkB,EACjC,KAAK,YAAcA,EAAI,WAAc,CACzC,CACA,OAAO,KAAK,WAChB,CAEA,gBAAgBQ,EAAOD,EAAM,CACzB,KAAK,MAAQC,EACb,KAAK,KAAOD,CAChB,CAGU,oBAAoBG,EAA8B,CACxD,OAAgB,cAAY,SAASA,CAAM,CAC/C,CAIU,eAAeF,EAAe,CAEpC,GAAM,gBAAcA,CAAK,EAAG,CACpB,KAAK,aAAe,OACpB,KAAK,YAAY,aAAa,IAAI,EAClC,KAAK,YAAc,MAEtB,KAAK,QAA0C,YAAc,KAC9D,MACJ,CAEA,KAAK,YAAc,IAAa,qBAAkD,SAAQ,KAAMG,GAAK,CACjG,KAAK,iBAAiB,KAAK,oBAAoBA,CAAC,CAAC,CACrD,CAAC,EAED,KAAK,YAAY,aAAaH,CAAK,EAClC,KAAK,QAA0C,YAAcA,CAClE,CAEU,iBAA0B,CAChC,OAAQ,KAAK,QAA0C,WAC3D,CAEA,IAAI,aAAsB,CACtB,OAAO,KAAK,gBAAgB,CAChC,CAEU,gBAAgBA,EAAe,CACjCA,IAAW,KAAK,QAA0C,cAC1D,KAAK,eAAeA,CAAK,EACzB,KAAK,YAAY,EAEzB,CAEA,IAAI,YAAYA,EAAe,CAC3B,KAAK,gBAAgBA,CAAK,CAC9B,CAEU,kBAAmB,CACzB,OAAS,WAAU,KAAK,QAA0C,aAAe,KAAK,QAA0C,WAAW,CAC/I,CAEA,IAAI,cAAuB,CACvB,OAAO,KAAK,iBAAiB,CACjC,CAEU,iBAAiBA,EAAe,CACrC,KAAK,QAA0C,aAAeA,CACnE,CAEA,IAAI,aAAaA,EAAe,CAC5B,KAAK,iBAAiBA,CAAK,CAC/B,CAEU,kBAAwB,CAC9B,OAAQ,KAAK,QAA0C,YAC3D,CAEA,IAAI,cAAoB,CACpB,OAAO,KAAK,iBAAiB,CACjC,CAEU,iBAAiBA,EAAY,CAC9B,KAAK,QAA0C,eAAiBA,IAChE,KAAK,QAA0C,aAAeA,EAC/D,KAAK,UAAU,IAAI,EACnB,KAAK,YAAY,EAGzB,CAEA,IAAI,aAAaA,EAAY,CACzB,KAAK,iBAAiBA,CAAK,CAC/B,CAEU,iBAAkB,CACxB,OAAQ,KAAK,QAA0C,WAC3D,CAEA,IAAI,aAAsB,CACtB,OAAO,KAAK,gBAAgB,CAChC,CAEU,gBAAgBA,EAAe,CACpC,KAAK,QAA0C,YAAcA,CAClE,CAEA,IAAI,YAAYA,EAAe,CAC3B,KAAK,gBAAgBA,CAAK,CAC9B,CAEU,iBAAuB,CAC7B,OAAQ,KAAK,QAA0C,WAC3D,CAEA,IAAI,aAAmB,CACnB,OAAO,KAAK,gBAAgB,CAChC,CAEU,gBAAgBA,EAAY,CAC7B,KAAK,QAA0C,cAAgBA,IAC/D,KAAK,QAA0C,YAAcA,EAC9D,KAAK,UAAU,IAAI,EACnB,KAAK,YAAY,EAGzB,CAEA,IAAI,YAAYA,EAAY,CACxB,KAAK,gBAAgBA,CAAK,CAC9B,CAEU,aAAc,CACxB,CAEJ,EA3XaI,EAAAtB,EAAA,wBAAAA,EAANuB,EAAA,CAFG,aAAW,eAAe,4BAA6B,CAAU,gBAAwB,gBAAwB,eAAuB,YAAoB,mBAAiB,CAAC,EAC9K,aAAW,QAAQ,uBAAyB,GACzCvB,GQPb,IAAAwB,EAAmB,SAEZ,SAASC,EAAWC,EAAK,CAC5B,EAAE,KAAK,CACH,IAAKA,EACL,SAAU,SACV,MAAO,GACP,MAAO,GACP,QAAS,UAAY,CAErB,EACA,MAAO,UAAY,CACf,MAAM,IAAI,MAAM,yBAA2BA,CAAG,CAClD,CACJ,CAAC,CACL,CAbgBC,EAAAF,EAAA,cA0LT,SAASG,GAAwB,CAChC,OAAO,OAAY,OAAO,MAAS,SAAc,OAAO,MAAS,QAAW,MAG5EC,EAAa,aAAW,qCAAqC,CAAC,CAEtE,CANgBC,EAAAF,EAAA,yBAQT,SAASG,GAA2B,CACnC,OAAO,OAAY,OAAO,MAAS,gBAGnCF,EAAa,aAAW,0DAA0D,CAAC,CAE3F,CANgBC,EAAAC,EAAA,4BT1LhB,IAAAC,EAAqB,UAGd,IAAMC,EAAN,cAAiD,YAA4B,CAwBhF,YAAYC,EAAmBC,EAAoB,CAC/C,MAAMD,EAAWC,CAAO,EAT5B,iBAAc,GACd,iBAAc,GACd,mBAAgB,EASZ,IAAIC,EAAa,KAAK,mBAAmB,EAErCA,EAAW,gBAAkB,IAC7B,KAAK,eAAe,OAAO,EAAG,CAAC,EAG/BA,EAAW,gCAAkC,KAC7C,KAAK,aAAe,IAAa,wBAAsB,IAAI,GAG/D,IAAIC,EAAW,KAAK,YAAY,EAC5BA,EAAS,OAAS,GAClB,KAAK,YAAYA,CAAQ,CAEjC,CA/BU,oBAAqC,CAAE,OAAS,YAAYC,CAAsB,CAAG,CACrF,cAAwB,CAAE,OAAO,KAAK,QAAQ,SAAS,uBAAuB,CAAG,CACjF,aAA4C,CAAE,MAAO,CAAC,CAAG,CA+BzD,aAAoB,CAC1B,MAAM,YAAY,EAElB,WAAW,IAAM,CACT,KAAK,aAAe,KAChB,KAAK,mBAAmB,EAAE,gBAAkB,IAC5C,KAAK,gBAAgB,EAEzB,KAAK,eAAe,OAAO,IAAK,CAAC,EAEzC,EAAG,GAAG,CAEV,CAEU,YAAa,CACnB,IAAIC,EAAU,MAAM,WAAW,EAC/B,IAAIC,EAAgB,KAAK,iBAAiB,EAE1C,OAAIA,EAAc,4BACdD,EAAQ,KAAS,oBAAkB,iBAAiB,CAChD,KAAM,KACN,QAAS,KAAK,WAAW,EAAI,IAAMC,EAAc,2BACjD,aAAc,IAAM,KAAK,aAAa,EACtC,UAAW,EACf,CAAC,CAAC,EAGFA,EAAc,WACdD,EAAQ,KAAK,CACT,MAASE,EAAK,uBAAwB,eAAe,EACrD,KAAM,mBACN,QAAS,IAAM,CACX,IAAIC,EAAU,KAAK,iBAAiB,EAChCA,GACI,eAAa,QAAQ,CAAE,UAAWF,EAAc,UAAW,OAAQ,CAAE,QAASE,CAAQ,CAAE,CAAC,CACrG,CACJ,CAAC,EAEDH,EAAQ,KAAK,CACT,MAASE,EAAK,wBAAyB,gBAAgB,EACvD,KAAM,cACN,QAAS,IAAM,CACX,IAAIC,EAAU,KAAK,iBAAiB,EAChCA,GACI,eAAa,QAAQ,CAAE,UAAWF,EAAc,UAAW,OAAQ,CAAE,QAASE,CAAQ,EAAG,UAAW,MAAO,CAAC,CACxH,CACJ,CAAC,GAEMF,EAAc,yBACrBD,EAAQ,KAAK,CACT,MAASE,EAAK,wBAAyB,gBAAgB,EACvD,KAAM,YACN,QAAS,IAAM,CACX,IAAIC,EAAU,KAAK,iBAAiB,EAChCA,GACE,gBAAc,CAAE,QAAW,aAAW,KAAK,WAAW,EAAI,IAAMF,EAAc,uBAAuB,EAAG,QAASE,EAAS,OAAQ,QAAS,CAAC,CACtJ,CACJ,CAAC,EAUEH,CACX,CAEU,kBAAsC,CAC5C,IAAII,EAAO,KAAK,QAAQ,EAExB,IAAID,EAAY,YAAUC,EAAOA,EAAK,OAAS,CAAC,CAAC,EAOjD,GANAD,EAAQ,wBAA0B,KAClCA,EAAQ,UAAY,KACpBA,EAAQ,2BAA+BE,EACvCF,EAAQ,4BAA8B,CAAC,EACvCA,EAAQ,iBAAmB,CAAC,EAExBC,EAAM,CACN,IAAIE,EAAe,KAAK,gBAAgB,EAExC,QAASC,KAAeD,EAAc,CAClC,IAAIE,EAAcL,EAAQ,eAAeI,EAAY,KAAK,EAC1D,GAAIC,GAAeA,EAAY,OAAS,EACpC,GAAID,EAAY,QAAQ,UAAW,CAC/B,IAAIE,EAAW,YAAUF,EAAY,QAAQ,SAAS,EACtDJ,EAAQ,4BAA4BI,EAAY,KAAK,EAAIE,EAAO,SAASD,CAAW,EAAEC,EAAO,SAAS,CAC1G,SACSF,EAAY,QAAQ,QAAS,CAClC,IAAIG,EAAUH,EAAY,QAAQ,QAC9BI,EAAc,OAAKH,CAAW,EAClCL,EAAQ,4BAA4BI,EAAY,KAAK,EAAa,gBAAc,OAAgB,mBAAiB,IAAIG,CAAO,EAAGC,CAAS,CAC5I,SACSJ,EAAY,MAAQK,EAAsB,CAC/C,IAAIC,EAAe,KAAK,gBAAgBD,EAAsBL,EAAY,KAAK,EAC/EJ,EAAQ,4BAA4BI,EAAY,KAAK,EAAIM,EAAa,IAE1E,MAEIV,EAAQ,4BAA4BI,EAAY,KAAK,EAAIC,UAEtDD,EAAY,MAAiB,aAAY,CAChD,IAAIO,EAAK,KAAK,gBAAyB,aAAYP,EAAY,KAAK,EAChEQ,EAAWD,EAAG,QAAQ,IAAI,EAC1BE,EAASF,EAAG,QAAQ,SAAS,OAAO,EAAE,IAAI,EAE1CG,EAAa,GAEV,gBAAcF,CAAQ,IACzBE,EAAe,SAASf,EAAK,oBAAqB,UAAU,EAAGa,CAAQ,EAAI,KAExE,gBAAcC,CAAM,IACvBC,EAAaA,EAAe,SAASf,EAAK,kBAAmB,QAAQ,EAAGc,CAAM,GAE3E,gBAAcC,CAAU,EAGtB,KAAK,mBAAmB,EAAE,sCAAwC,KACvEd,EAAQ,4BAA4BI,EAAY,KAAK,EAAML,EAAK,eAAgB,KAAK,GAHrFC,EAAQ,4BAA4BI,EAAY,KAAK,EAAIU,CAKjE,MAAW,KAAK,mBAAmB,EAAE,sCAAwC,KACzEd,EAAQ,4BAA4BI,EAAY,KAAK,EAAML,EAAK,eAAgB,KAAK,EAE7F,CAEA,GAAI,KAAK,UAAW,CAChB,IAAIgB,EAAuB,KAAK,UAAU,UAAU,EAAE,gBAAgB,EAC/D,gBAAcA,CAAoB,IACrCf,EAAQ,4BAA8B,OAAK,iCAAiC,CAAC,EAAIe,EACzF,CAEJ,CAEA,OAAOf,CACX,CAEU,YAAiC,CACvC,IAAIgB,EAAU,MAAM,WAAW,EAE3BC,EAAa,KAAK,gBAAgB,EAAE,SACpCvB,EAAa,KAAK,mBAAmB,EA0KzC,GAxKIuB,GAAc,IACdC,EAAsB,EAG1BF,EAAQ,QAAQG,GAAU,CACtB,IAAIC,EAAiBD,EAAO,UAAY,GACpCE,EAAcF,EAAO,UAAYA,EAAO,OAAS,GAErD,GAAIA,EAAO,WAAY,CACnB,IAAIG,EAAgBH,EAAO,WAAW,cAElCA,EAAO,WAAW,eAAiB,UACnCC,EAAiB,cACjBC,EAAcF,EAAO,SAAW,IAAMA,EAAO,SAAW,KACjDG,GAAiB,OACxBD,EAAcF,EAAO,SAAW,IAAMA,EAAO,SAAW,IACjDG,GAAiB,QACxBF,EAAiB,gBACjBC,EAAcF,EAAO,SAAW,GAAKA,EAAO,SAAW,IAChDG,GAAiB,YACxBF,EAAiB,gBACjBC,EAAcF,EAAO,SAAW,IAAMA,EAAO,SAAW,KACjDG,GAAiB,SACxBF,EAAiB,eAEVE,GAAiB,WACxBF,EAAiB,iBAEjBA,EAAiB,cACjBC,EAAcF,EAAO,SAAW,GAAKA,EAAO,SAAW,IAI3D,IAAII,EAAYJ,EAAO,WAAW,aAAe,eAAmBpB,EAAK,eAAgB,KAAK,EAAI,IAElG,GAAIoB,EAAO,WAAW,YAAc,SAC3BA,EAAO,WAAW,aAAa,eAChCA,EAAO,OAASK,GAAO,CACnB,IAAIlB,EAAW,YAAUa,EAAO,WAAW,aAAa,SAAS,EACjE,GAAIK,EAAI,OAAO,WAAW,aAAa,UAAY,IAC/C,GAAIA,EAAI,MAAO,CAEX,IAAIC,EADQD,EAAI,MAAM,IAAIE,GAAKpB,EAAO,SAASoB,CAAC,CAAC,EAC/B,IAAIA,GAAKA,EAAEpB,EAAO,SAAS,CAAC,EAE9C,OAAOmB,EAAM,OAAS,EAAIA,EAAM,KAAK,IAAI,EAAIF,CACjD,MACG,CACH,IAAII,EAAOrB,EAAO,SAASkB,EAAI,KAAK,EACpC,OAAIG,EAAaA,EAAKrB,EAAO,SAAS,EAC1BiB,CAChB,CACJ,WAEGJ,EAAO,WAAW,YAAc,gBAClCA,EAAO,WAAW,aAAa,eAC/BA,EAAe,mBAAqBA,EAAO,WAAW,aAAa,oBAAsBA,EAAO,WAAW,aAAa,UACzHA,EAAO,UAAY,CAACS,EAAKC,EAAMC,EAAOC,EAAgBC,IAC9CA,EAAoBA,EAAYD,EAAU,kBAAkB,EACpDR,WAGbJ,EAAO,WAAW,eAAiB,SAC1CA,EAAO,UAAY,CAACS,EAAKC,EAAMC,EAAOC,EAAgBC,IAC5C,gBAAcF,CAAK,EAAUP,EACvBO,UAGTR,GAAiB,OAExBH,EAAO,UAAY,CAACS,EAAKC,EAAMC,EAAOC,EAAgBC,IAAgB,CAClE,IAAIzB,EAAUwB,EAAU,WAAW,aAAa,QAChD,GAAIA,EAAU,WAAW,aAAa,UAAY,GAAM,CACpD,IAAIN,EAAQ,GAERQ,EAAOH,EAIX,OAHIG,GAAQA,EAAK,OAAS,IACtBR,EAAQQ,EAAK,IAAIP,IAAc,gBAAc,OAAgB,mBAAiB,IAAInB,CAAO,EAAK,OAAKmB,EAAC,CAAC,CAAC,EAAE,KAAK,IAAI,GAEjHD,GACQF,CAEhB,KACK,CACD,IAAIxB,EAAgB,gBAAc,OAAgB,mBAAiB,IAAIQ,CAAO,EAAK,OAAKuB,CAAK,CAAC,EAC9F,OAAI/B,GACQwB,CAChB,CACJ,UACOJ,EAAO,WAAW,YAAc,UAAW,CAElD,IAAIe,EAAY,WAEhB,GAAIf,EAAO,WAAW,aAAc,CAChC,IAAIgB,EAAWhB,EAAO,WAAW,aAAa,SAC9C,GAAIgB,EAAU,CACVD,EAAY,SACZ,QAASE,EAAI,EAAGA,EAAID,EAAUC,IAC1BF,GAAa,GAErB,SACSf,EAAO,WAAW,aAAa,SAAa,CACjD,IAAIkB,EAAmBlB,EAAO,WAAW,aAAa,SAAuB,MAAM,GAAG,EAClFkB,EAAgB,OAAS,EACzBH,EAAY,SAAWG,EAAgB,CAAC,EAExCH,EAAY,OAGpB,CACJ,CAEAf,EAAO,OAASK,GAAgB,kBAAgB,OAAOA,EAAI,MAAOU,CAAS,CAC/E,CAGA,GAAIjB,GAAc,IAAQE,EAAO,WAAW,UAAY,GACpD,GAAMmB,EACFnB,EAAO,OAAS,yBACb,CACH,IAAIoB,EAAapB,EAAO,WAAW,WAE/BoB,GAAc,UAAYA,GAAc,QACxCpB,EAAO,OAAS,MAAM,QAAW,QACjCE,EAAcF,EAAO,SAAW,IAAMA,EAAO,SAAW,KACjDoB,GAAc,OACrBpB,EAAO,OAAS,MAAM,QAAW,KAC1BoB,GAAc,UACrBpB,EAAO,OAAS,MAAM,QAAW,SAC1BoB,GAAc,UACrBpB,EAAO,OAAS,MAAM,QAAW,QAC1BoB,GAAc,UACrBpB,EAAO,OAAS,MAAM,QAAW,MAC1BoB,GAAc,cACrBpB,EAAO,OAAS,MAAM,QAAW,YAC1BoB,GAAc,kBACrBpB,EAAO,OAAS,MAAM,QAAW,gBAC1BoB,GAAc,WACrBpB,EAAO,OAAS,MAAM,QAAW,SAEjCA,EAAO,OAAS,MAAM,QAAW,IAEzC,CAER,CAEAA,EAAO,UAAYC,EACf,KAAK,mBAAmB,EAAE,gBAAkB,KAC5CD,EAAO,MAAQE,EAEvB,CAAC,EAEDL,EAAQ,QAAQ,CACZ,MAAO,SACP,KAAM,IACN,SAAU,gBACV,eAAgB,eAChB,MAAO,GACP,SAAU,GACV,SAAU,GACV,QAAStB,EAAW,oBACpB,OAAQ8B,IACCA,EAAI,KAAK,SACVA,EAAI,KAAK,OAAS,KAAK,iBAEpB,OAAOA,EAAI,KAAK,MAAM,EAErC,CAAC,EAEG9B,EAAW,yBAA2B,GAAM,CAC5C,IAAI8C,EAA2B,EAC3BC,EAA6B,GAEjC,GAAI/C,EAAW,sBAAwB,GAAM,CACzC8C,GAA4B,GAC5B,IAAIE,EAAQ,KAAK,WAAe3C,EAAK,gBAAiB,cAAc,EAAMA,EAAK,gBAAiB,MAAM,EACtG0C,GAA8B,iDAAiDC,qFACnF,CAEIhD,EAAW,wBAA0B,KACrC8C,GAA4B,GAC5BC,GAA8B,+CAAiD1C,EAAK,kBAAmB,QAAQ,uFAG/GL,EAAW,uBAAyB,KACpC8C,GAA4B,GAC5BC,GAA8B,8CAAgD1C,EAAK,iBAAkB,OAAO,2EAGhHiB,EAAQ,QAAQ,CACZ,MAAO,iBACP,KAAM,GACN,SAAU,wBACV,MAAOwB,EACP,SAAUA,EACV,SAAUA,EACV,UAAW,CAACZ,EAAKC,EAAMC,EAAOC,EAAWC,IAC9BS,CAEf,CAAC,CACL,CAEA,GAAI/C,EAAW,gCAAkC,GAAM,CACnD,IAAIiD,EAA2B,wBAAsB,mBAAmB,IAAM,KAAK,YAAY,EAC/FA,EAAgB,MAAQA,EAAgB,SAAWA,EAAgB,SAAW,GAC9E3B,EAAQ,QAAQ2B,CAAe,CACnC,CAEA,GAAI,KAAK,aAAa,EAAG,CACrB,IAAIlD,EAAW,KAAK,QAWpB,GAVI,CAACA,EAAQ,UAAY,CAACA,EAAQ,UAC5B,gBAAc,sGAAsG,EAI1HuB,EAAQ,QAAQG,GAAU,CAClBA,EAAO,YAAcA,EAAO,WAAW,WACvCA,EAAO,OAAS,OACxB,CAAC,EAEG1B,EAAQ,UAAY,GAAM,CAC1B,IAAIkD,EAA2B,wBAAsB,mBAAmB,IAAM,KAAK,YAAY,EAC/FA,EAAgB,MAAQA,EAAgB,SAAWA,EAAgB,SAAW,GAC9E3B,EAAQ,QAAQ2B,CAAe,CACnC,MACI3B,EAAQ,QAAQ,CACZ,MAAO,gBACP,KAAM,GACN,SAAU,wBACV,MAAO,GACP,SAAU,GACV,SAAU,GACV,OAAQQ,GAAO,wFACnB,CAAC,CAIT,CAEA,OAAOR,CACX,CAEU,iBAAkB,CACxB,IAAI4B,EAAO,MAAM,gBAAgB,EAEjC,OAAAC,EAAyB,EAErB,MAAM,iBACN,KAAK,qBAAuB,IAAI,MAAM,eACtCD,EAAK,eAAe,KAAK,oBAAoB,GAEjDA,EAAK,eAAe,IAAI,MAAM,KAAK,yBAA2B,EAEvDA,CACX,CAEO,aAAa5B,EAA6B,CAE7C,KAAK,eAAe,OAAO,EAAG,CAAC,EAE/B,KAAK,UAAU,WAAWA,CAAO,EAEjC,WAAW,IAAM,CACT,KAAK,mBAAmB,EAAE,gBAAkB,IAC5C,KAAK,gBAAgB,EAEzB,KAAK,eAAe,OAAO,IAAK,CAAC,CACrC,EAAG,GAAG,CAEV,CAEO,iBAAkB,CACrB,KAAK,YAAc,GAEnB,IAAI8B,EAAqB,KAAK,eAAe,MAAM,EAE/CA,EAAqB,IAAcA,EAAqB,KAAK,QAAQ,QAAQ,WAAW,EAAE,MAAM,EAAI,IACpGA,EAAqB,IAAcA,EAAqB,KAAK,QAAQ,QAAQ,UAAU,EAAE,MAAM,EAAI,IACnGA,EAAqB,IAAcA,EAAqB,EAAE,iBAAiB,EAAE,MAAM,EAAI,IAE3F,KAAK,UAAU,WAAW,CAAE,gBAAiB,EAAM,CAAC,EAEpD,IAAIC,EAAoB,KAAK,qBAAqB,iBAAiB,EAAE,OAAOC,GAAKA,EAAE,SAAW,EAAK,EAG/FC,EAAwB,EAI5B,GAHAF,EAAkB,IAAIrB,GAAKA,EAAE,KAAK,EAAE,QAAQwB,GAAKD,GAAyBC,CAAC,EAGvED,EAAwBH,EACxB,KAAK,qBAAqB,iBAAiB,UAEpCG,EAAwBH,EAAoB,CACnD,KAAK,qBAAqB,iBAAiB,EAC3C,IAAIK,EAAmB,CAAC,EACpBC,EAAmB,CAAC,EAExBL,EAAkB,QAAQM,GAAK,CAEvBA,EAAE,UAAYA,EAAE,UAChBF,EAAiB,KAAKE,CAAC,EACvBA,EAAE,MAAQA,EAAE,UACLA,EAAE,UAAYA,EAAE,SAAS,QAAQ,cAAc,GAAK,EAC3DF,EAAiB,KAAKE,CAAC,EAChBA,EAAE,WACLA,EAAE,WAAW,eAAiB,OAAO,QAAQ,EAC7CF,EAAiB,KAAKE,CAAC,EAElBA,EAAE,WAAW,eAAiB,OAAO,MAAM,GAI3CA,EAAE,WAAW,eAAiB,OAAO,MAAM,GAHhDF,EAAiB,KAAKE,CAAC,EACnBA,EAAE,MAAQ,KAAIA,EAAE,MAAQ,KAMrBA,EAAE,WAAW,eAAiB,OAAO,UAAU,GACtDF,EAAiB,KAAKE,CAAC,EAEnBA,EAAE,MAAQ,MAAKA,EAAE,MAAQ,MACtBA,EAAE,WAAW,eAAiB,OAAO,UAAU,EACtDF,EAAiB,KAAKE,CAAC,EAEvBD,EAAiB,KAAKC,CAAC,EAI3BD,EAAiB,KAAKC,CAAC,CAG/B,CAAC,EAEGD,EAAiB,QAAU,IAC3BD,EAAmB,CAAC,EACpBC,EAAmB,CAAC,EAEpBL,EAAkB,QAAQM,GAAK,CAEvBA,EAAE,UAAYA,EAAE,UAChBF,EAAiB,KAAKE,CAAC,EACvBA,EAAE,MAAQA,EAAE,UAEZD,EAAiB,KAAKC,CAAC,CAG/B,CAAC,GAGL,IAAIC,EAAwB,EAC5BH,EAAiB,IAAIzB,GAAKA,EAAE,KAAK,EAAE,QAAQwB,GAAKI,GAAyBJ,CAAC,EAE1E,IAAIK,EAA2BT,EAAqBQ,GAAyB,KAAK,YAAc,GAAK,IAEjGE,EAAwB,EAC5BJ,EACK,IAAI1B,GAAKA,EAAE,KAAK,EAChB,QAAQwB,GAAKM,GAAyBN,CAAC,EAE5CE,EAAiB,QAAQC,GAAK,CAC1B,IAAII,EAAyBF,EAA2BC,EACpDE,EAAWL,EAAE,MAAQI,EACrBE,EAAYD,EAAWL,EAAE,MAG7BA,EAAE,MAAQK,CAGd,CAAC,EAED,KAAK,UAAU,WAAWX,CAAiB,EAC3C,KAAK,UAAU,iBAAiB,OAAO,CAE3C,CACA,KAAK,SAAS,KAAK,SAAS,CAAC,CACjC,CAEU,iBAAkB,CACxB,IAAIa,EAAM,MAAM,gBAAgB,EAChC,OAAI,KAAK,mBAAmB,EAAE,gBAAkB,KAC5CA,EAAI,gBAAkB,IAG1BA,EAAI,2BAA6B,GAEjCA,EAAI,qBAAuB,GAC3BA,EAAI,mBAAqB,GACzBA,EAAI,SAAW,GACfA,EAAI,UAAY,GAETA,CACX,CAEU,gBAAiB,CACvB,IAAIA,EAAM,MAAM,eAAe,EAE/B,OAAAA,EAAI,YAAgBhE,EAAuB,YAEpCgE,CACX,CAEU,0BAA2B,CAAE,MAAO,OAAQ,CAE5C,QAAQ,EAAsBhC,EAAaC,EAAc,CAG/D,GAFA,MAAM,QAAQ,EAAGD,EAAKC,CAAI,EAEtB,EAAE,mBAAmB,EACrB,OAEJ,IAAIF,EAAO,KAAK,OAAOC,CAAG,EAC1B,IAAIiC,EAAWlC,EAAK,KAAK,cAAc,CAAC,EACxC,IAAImC,EAAS,EAAE,EAAE,MAAM,GAGnBA,EAAO,OAAO,EAAE,SAAS,eAAe,GAAKA,EAAO,OAAO,EAAE,SAAS,gBAAgB,GAAKA,EAAO,OAAO,EAAE,SAAS,YAAY,KAChIA,EAASA,EAAO,OAAO,IAEvBA,EAAO,SAAS,eAAe,GAAKA,EAAO,SAAS,gBAAgB,GAAKA,EAAO,SAAS,YAAY,IAGrG,KAAK,oBAAoBA,EAAQD,EAAUlC,CAAI,CAGvD,CAEU,oBAAoBmC,EAAgBD,EAAUlC,EAAmB,CACvE,GAAImC,EAAO,SAAS,YAAY,EACxB,KAAK,YAAc,GACjB,gBAAc,yCAAyC,EAEvD,UAAU/D,EAAK,8CAA+C,gBAAgB,EAAG,IAAM,CACrF,IAAIgE,EAAI,KACJA,EAAE,aACFA,EAAE,aAAaF,CAAQ,EAGrB,iBAAe,KAAK,WAAW,EAAI,UAAW,CAAE,SAAUA,CAAS,EAAGG,GAAY,CAChF,KAAK,QAAQ,CACjB,CAAC,CAET,CAAC,UAGAF,EAAO,SAAS,cAAc,EAClC,KAAK,UAAkB,kBAAkB,EAAE,kBAAkB,EAE9D,KAAK,SAASD,CAAQ,UAEjBC,EAAO,SAAS,WAAW,EAAG,CACnC,IAAI9D,EAAoC,CAAE,SAAU6D,CAAS,EAE3D,gBAAc,CAAE,QAAW,aAAW,KAAK,WAAW,EAAI,IAAM,KAAK,yBAAyB,CAAC,EAAG,QAAS7D,EAAS,OAAQ,QAAS,CAAC,CAC5I,MACS8D,EAAO,SAAS,YAAY,IACjC,KAAK,aAAa,gBAAgB,CAACD,CAAQ,CAAC,EAC5C,KAAK,aAAa,UAAU,KAAK,aAAa,EAC9C,KAAK,aAAa,YAAY,EAEtC,CAEU,gBAAiB,CACvB,KAAK,cAAgB,EACrB,IAAII,EAAQ,KAAK,SAAS,EAEtBC,EAAkB,KAAK,KAAK,YAAY,EAE5C,GAAIA,EAAgB,QAAU,EAC1B,QAAS9B,EAAI,EAAGA,EAAI6B,EAAM,OAAQ7B,IAC7B6B,EAAM7B,CAAC,EAAU,OAASA,EAAI,UAE5B8B,EAAgB,OAAS,EAAG,CAEnC,IAAIC,EAAoBC,EAACC,GAAmC,CAExD,QAASC,EAAK,EAAGA,EAAKD,EAAO,OAAQC,IAAM,CACvC,IAAIC,EAAYF,EAAOC,CAAE,EAAE,OAC3B,GAAIC,EACAJ,EAAkBI,CAAS,MACxB,CACH,IAAIC,EAAOH,EAAOC,CAAE,EAAE,KACtB,QAASlC,EAAI,EAAGA,EAAIoC,EAAK,OAAQpC,IAC7BoC,EAAKpC,CAAC,EAAE,OAASA,EAAI,CAE7B,CACJ,CACJ,EAbwB,qBAepBiC,EAAS,KAAK,KAAK,UAAU,EACjCF,EAAkBE,CAAM,CAC5B,CAEA,KAAK,SAASJ,CAAK,CACvB,CAGO,YAAYQ,EAA+C,CAC9D,KAAK,KAAK,YAAYA,CAAS,EAC/B,KAAK,eAAe,CACxB,CAEU,kBAAkBC,EAAsC,CAC9D,MAAM,kBAAkBA,CAAO,EAC/B,IAAI/E,EAAW,KAAK,YAAY,EAE5BA,EAAS,OAAS,GAClBA,EAAS,QAAQqD,GAAK0B,EAAQ1B,EAAE,MAAM,EAAI,EAAI,CACtD,CAEU,kBAAmB,CACzB,IAAI2B,EAAS,MAAM,iBAAiB,EAChChF,EAAW,KAAK,YAAY,EAEhC,OAAIA,EAAS,OAAS,GAClBA,EAAS,QAAQqD,GAAK2B,EAAO,QAAQ3B,EAAE,MAAM,CAAC,EAE3C2B,CACX,CAEU,kBAAkBX,EAAsE,CAC9F,IAAIY,EAAI,MAAM,kBAAkBZ,CAAQ,EAExC,OAAI,KAAK,mBAAmB,EAAE,qBAAuB,IACjD,WAAW,IAAM,CAAE,KAAK,eAAe,CAAE,CAAC,EAEvCY,CACX,CAEO,WAAWC,EAAsC,CACpD,MAAM,WAAWA,CAAM,EAEvBA,EAAO,WAAa,IACxB,CAEA,IAAI,eAAgB,CAChB,OAAO,KAAK,aAAa,gBAAgB,EAAE,IAAInD,GAAK,CAChD,IAAIC,EAAO,KAAK,KAAK,YAAYD,CAAC,EAElC,OAAKC,IACDA,EAAO,CAAC,EACRA,EAAK,KAAK,cAAc,CAAC,EAAID,GAG1BC,CACX,CAAC,CACL,CAEA,IAAI,aAAaG,EAAc,CACZ,KAAK,QACR,UAAY,IACpB,KAAK,aAAa,gBAAgBA,CAAK,CAI/C,CAEU,cAAe,CACrB,GAAI,CAAC,MAAM,aAAa,EACpB,MAAO,GAGX,IAAI9B,EAAU,KAAK,KAAK,OAExB,IAAIP,EAAW,KAAK,QAEhBA,EAAQ,oBACRO,EAAQ,SAAoB,WAAS,IAAIA,EAAQ,SAAUP,EAAQ,iBAAiB,GAGpFA,EAAQ,aAAiB,UAAQA,EAAQ,WAAW,IACpDO,EAAQ,eAAiBA,EAAQ,gBAAkB,CAAC,EACpDA,EAAQ,eAAeP,EAAQ,WAAW,EAAIA,EAAQ,aAG1D,IAAIqF,EAAerF,EAAQ,cAAgBA,EAAQ,YACnD,OAAIqF,GAAkB,UAAQrF,EAAQ,YAAY,IAC9CO,EAAQ,eAAiBA,EAAQ,gBAAkB,CAAC,EACpDA,EAAQ,eAAe8E,CAAY,EAAIrF,EAAQ,cAG5C,EACX,CAEJ,EA/vBa2E,EAAA7E,EAAA,YAAAA,EAANwF,EAAA,CADG,aAAW,WAAW,GACnBxF,GUbb,IAAAyF,EAA0B,SAC1BC,EAAmB,SCDnB,IAAAC,EAA0B,SAC1BC,GAAmB,SAGZ,SAASC,GAA2BC,EAAiBC,EAAkC,CAC1FD,EAAQ,GAAG,qCAAsC,SAAU,EAAG,CACtD,CAAU,KAAG,iBAAiB,CAAC,GAAK,CAACC,EAAkB,IAI3D,EAAE,eAAe,EAEf,WAAUC,EAAK,mDAAoD,sCAAsC,EACvG,IAAMF,EAAQ,KAAK,2BAA2B,EAAE,MAAM,EACtD,CACI,KAAM,UAAY,CACVA,EAAQ,SAAS,mBAAmB,EACpCA,EAAQ,OAAO,OAAO,EACjBA,EAAQ,SAAS,SAAS,GACtB,kBAAgB,WAAWA,CAAO,CACnD,CACJ,CAAC,EACT,CAAC,CACL,CAnBgBG,EAAAJ,GAAA,8BDIT,IAAMK,EAAN,cAAqD,cAAgC,CAexF,YAAYC,EAAM,CACd,MAAMA,CAAG,EAJb,gBAAsB,GAOd,KAAK,qBAAqB,EAAE,4BAA8B,IAC9CC,GAA2B,KAAK,QAAS,IAAM,KAAK,aAAa,GAAK,KAAK,WAAW,CAE1G,CArBU,YAAyK,CAAE,MAAO,CAAC,CAAG,CACtL,eAAgB,CAAE,OAAO,KAAK,WAAW,EAAE,UAAY,CACvD,oBAAqB,CAAE,OAAO,KAAK,WAAW,EAAE,eAAiB,CACjE,iBAAkB,CAAE,OAAO,KAAK,WAAW,EAAE,YAAc,CAC3D,qBAAsB,CAAE,OAAO,KAAK,WAAW,EAAE,gBAAkB,CACnE,qBAAsB,CAAE,OAAO,KAAK,WAAW,EAAE,gBAAkB,CACnE,qBAAsB,CAAE,OAAO,KAAK,WAAW,EAAE,gBAAkB,CAEnE,sBAAyC,CAAE,OAAS,YAAYC,CAA0B,CAAG,CAe7F,iBAAkB,CACxB,MAAM,gBAAgB,EAEtB,KAAK,YAAY,KAAK,UAAU,CAGpC,CAEU,cAAe,CAOrB,GANA,MAAM,aAAa,EAEf,KAAK,qBAAqB,EAAE,oBAAsB,IAClD,KAAK,gBAAgB,EAGrB,KAAK,qBAAqB,EAAE,qBAAuB,GAAM,CACzD,KAAK,QAAQ,KAAK,iBAAiB,EAAE,KAAK,EAE1C,IAAIC,EAAiB,KAAK,QAAQ,KAAK,mCAAmC,EAEpE,gBAAcA,EAAe,KAAK,kBAAkB,EAAE,KAAK,CAAC,GAC9DA,EAAe,KAAK,CAE5B,CAEA,GAAI,KAAK,qBAAqB,EAAE,mCAAqC,GAAM,CACvE,IAAIC,EAAe,KAAK,QAKxB,KAAK,QAAQ,QAAQ,OAAO;AAAA,2GACqEC,EAAK,gCAAiC,iBAAiB;AAAA;AAAA;AAAA;AAAA,sDAI5GA,EAAK,gCAAiC,iBAAiB;AAAA,wEACrCA,EAAK,yCAA0C,iBAAiB;AAAA,uEACjEA,EAAK,wCAAyC,gBAAgB;AAAA,sEAC/DA,EAAK,uCAAwC,eAAe;AAAA,uEAC3DA,EAAK,kCAAmC,SAAS;AAAA;AAAA,uBAEnG,EAEX,IAAIC,EAA+B,KAAK,QAAQ,QAAQ,KAAK,kBAAkB,EAC3EC,EAAqB,KAAK,QAAQ,QAAQ,KAAK,kBAAkB,EACjEC,EAAqBD,EAAmB,KAAK,IAAI,EAErDC,EAAmB,GAAG,QAAS,UAAY,CACvC,IAAIC,EAAgB,EAAE,IAAI,EACtBC,EAAeD,EAAc,KAAK,IAAI,EAEtCC,IACAJ,EAA6B,KAAKG,EAAc,KAAK,CAAC,EAEpDE,EAAoBP,EAAcM,CAAY,EAEhDF,EAAmB,YAAY,QAAQ,EACvCD,EAAmB,KAAK,aAAeG,EAAe,IAAI,EAAE,SAAS,QAAQ,EAErF,CAAC,CAEL,CAGA,WAAW,IAAM,CAAE,KAAK,qBAAqB,CAAG,EAAG,GAAG,CAE1D,CAEU,eAAgB,CACtB,MAAM,cAAc,EAEpB,KAAK,mBAAmB,KAAK,cAAc,CAAC,CAChD,CAEU,YAAYE,EAAgB,CAIlC,GAHA,KAAK,SAAWA,EAChB,KAAK,WAAaA,EAEd,KAAK,YAAc,GAAM,CACzB,KAAK,mBAAmB,YAAY,WAAY,KAAK,UAAU,EAC/D,KAAK,mBAAmB,YAAY,WAAY,KAAK,UAAU,EAC/D,KAAK,aAAa,YAAY,WAAY,KAAK,UAAU,EACzD,KAAK,YAAY,YAAY,WAAY,KAAK,UAAU,EACxD,KAAK,eAAe,YAAY,WAAY,KAAK,UAAU,EAC3D,KAAK,QAAQ,WAAW,oBAAoB,EAAE,SAAS,UAAU,EACjE,KAAK,QAAQ,WAAW,kBAAkB,EAAE,SAAS,UAAU,EAC/D,KAAK,QAAQ,WAAW,iBAAiB,EAAE,SAAS,UAAU,EAC9D,KAAK,QAAQ,WAAW,aAAa,EAAE,SAAS,UAAU,EAC1D,KAAK,QAAQ,WAAW,YAAY,EAAE,SAAS,UAAU,EAGzD,KAAK,QAAQ,KAAK,KAAK,EAAE,OAAO,KAAK,UAAU,EAC/C,QAASC,KAAU,KAAK,KACpB,GAAI,KAAK,KAAKA,CAAM,EAAE,WAElB,GAAI,CACS,cAAY,YAAY,KAAK,KAAKA,CAAM,EAAG,KAAK,UAAU,CACvE,OAAQC,EAAN,CAAQ,CAItB,CACJ,CAEU,mBAA2C,CACjD,IAAIC,EAAU,MAAM,kBAAkB,EAClCC,EAAa,KAAK,qBAAqB,EAEvCA,EAAW,+BAAiC,IAC5CD,EAAQ,KAAK,CACT,MAASV,EAAK,mCAAoC,YAAY,EAC9D,KAAM,aACN,SAAU,mBACV,QAAS,IAAM,CACX,KAAK,wBAAwB,CACjC,CACJ,CAAC,EAEDW,EAAW,0BAA4B,IACvCD,EAAQ,KAAK,CACT,MAASV,EAAK,8BAA+B,OAAO,EACpD,KAAM,cACN,SAAU,YACV,QAAS,IAAM,CACX,KAAK,YAAY,CACrB,CACJ,CAAC,EAEDW,EAAW,4BAA8B,IACzCD,EAAQ,KAAK,CACT,MAASV,EAAK,gCAAiC,SAAS,EACxD,KAAM,gBACN,QAAS,IAAM,CACX,KAAK,eAAe,CACxB,CACJ,CAAC,EAEL,GAAI,CA4DA,IAAIY,EAAgB,WAASF,EAASG,GAAKA,EAAE,UAAY,cAAc,EAEvED,EAAY,QAAU,IAAM,CAExB,GAAK,KAAK,WAAW,EAIrB,KAAIE,EAAc,KAAK,iBAAiB,EAE/B,SAAO,OAAO,CACnB,KAAQ,kBAAgB,IAAI,EAC5B,KAAOC,GAA8B,CACjC,KAAK,WAAW,WAAWA,CAAG,EAC9BA,EAAI,wBAAwBD,EAAa,IAAI,CACjD,CACJ,CAAC,EAED,KAAK,YAAY,EACrB,CACJ,OAASL,EAAP,CAAY,CAEd,OAAOC,CACX,CAEU,gBAAiB,CACvB,KAAK,WAAW,CACpB,CAEU,yBAA0B,CAChC,KAAK,KAAKM,GAAY,CAClB,KAAK,WAAW,CAAC,CAAQ,CAC7B,CAAC,CACL,CAEU,cAAe,CACrB,GAAI,CACA,OAAO,EAAE,OAAO,KAAK,cAAc,CAAC,CACxC,OACO,EAAP,CACI,OAAO,IACX,CACJ,CAEU,cAAcA,EAAU,CAC9B,MAAM,cAAcA,CAAQ,CAEhC,CAEA,aAAaC,EAAM,CACf,MAAM,aAAaA,CAAI,EAEnB,KAAK,qBAAqB,EAAE,4BAA8B,KAC1D,KAAK,YAAc,KAAK,aAAa,EAE7C,CAEA,UAAW,CACP,KAAK,QAAQ,QAAQ,YAAY,EAAE,KAAK,8BAA8B,EAAE,MAAM,EAE9E,WAAW,IAAM,CACb,IAAIC,EAAgB,KAAK,QAAU,KAAK,QAAQ,QAAQ,YAAY,EAAI,EAAE,YAAY,EAElFC,EAAeD,EAAc,OAAO,EACpCE,EAAiBF,EAAc,KAAK,kBAAkB,EAAE,OAAO,GAAK,GAEpEG,EAAc,KAAK,QAAQ,KAAK,aAAa,EAC7CC,EAAgBD,EAAY,SAAS,EAAE,IAE3CA,EAAY,OAAOF,EAAeC,EAAiBE,EAAgB,EAAE,CAEzE,EAAG,GAAG,CAEV,CAEA,iBAAkB,CACd,KAAK,cAAc,CACvB,CAEA,cAAcC,EAAQC,EAASC,EAAMC,EAAOC,EAAW,CAC9CA,IACDA,EAAW,EAAE,iBAAiB,GAE9BA,EAAS,QAAU,IACnBA,EAAW,EAAE,kBAAkB,GAGnC,IAAIT,EAAgB,KAAK,QAAU,KAAK,QAAQ,QAAQ,YAAY,EAAI,EAAE,YAAY,EAEtF,GAAIS,EAAS,OAAS,GAAKT,EAAc,OAAS,EAAG,CAEjD,IAAIU,EAAcD,EAAS,MAAM,EAAI,IAAMJ,GAAS,GAChDJ,EAAeQ,EAAS,OAAO,GAAKH,GAAU,IAElD,KAAK,QAAQ,OAAO,SAAU,QAASI,CAAW,EAClD,KAAK,QAAQ,OAAO,SAAU,SAAUT,CAAY,EAEpD,IAAIC,EAAiBF,EAAc,KAAK,kBAAkB,EAAE,OAAO,GAAK,GAEpEG,EAAc,KAAK,QAAQ,KAAK,aAAa,EAC7CC,EAAgBD,EAAY,SAAS,EAAE,IAE3CA,EAAY,OAAOF,EAAeC,EAAiBE,EAAgB,EAAE,EAErEJ,EAAc,IAAI,CACd,KAAMS,EAAS,SAAS,EAAE,MAAQD,GAAQ,GAC1C,IAAMD,GAAO,EACjB,CAAC,CACL,CAEA,WAAW,IAAM,CACb,KAAK,qBAAqB,CAC9B,EAAG,GAAG,CAEV,CAEA,sBAAuB,CAAE,CACzB,mBAAmBI,EAAiB,CAAE,CAG1C,EAtVaC,EAAApC,EAAA,cAAAA,EAANqC,EAAA,CAFG,aAAW,WAAW,EACtB,aAAW,YAAY,GACpBrC",
  "names": ["require_extensions", "__commonJSMin", "exports", "module", "Serenity", "Q", "Serenity", "Q", "Serenity", "Q", "Serenity", "Q", "Q", "Serenity", "Serenity", "switchKeybordLayout", "$container", "layout", "writing_fields", "__name", "ListExcelServiceMethodName", "useSerenityInlineEditors", "DefaultMainGridOptions", "DefaultEntityDialogOptions", "text", "key", "fallback", "result", "__name", "GridItemPickerDialog", "options", "__name", "selectedItems", "gridType", "text", "ex", "opt", "__decorateClass", "GridItemPickerEditor", "container", "options", "self", "e", "pickerDialog", "GridItemPickerDialog", "selectedItems", "m", "val", "dlg", "dialogType", "ex", "valCVS", "property", "target", "source", "text", "value", "response", "parent", "p", "__name", "__decorateClass", "Q", "loadScript", "url", "__name", "usingSlickGridEditors", "loadScript", "__name", "usingSlickAutoColumnSize", "Ext", "GridBase", "container", "options", "extOptions", "grouping", "DefaultMainGridOptions", "buttons", "reportRequest", "text", "request", "view", "ListExcelServiceMethodName", "quickFilters", "quickFilter", "filterValue", "lookup", "enumKey", "enumValue", "GridItemPickerEditor", "customFilter", "qf", "dateFrom", "dateTo", "filterText", "filterBarDisplayText", "columns", "isEditable", "usingSlickGridEditors", "column", "columnCssClass", "columnWidth", "formatterType", "emptyText", "ctx", "texts", "m", "item", "row", "cell", "value", "columnDef", "dataContext", "vals", "formatSrt", "decimals", "i", "splitedMinValue", "useSerenityInlineEditors", "editorType", "inlineActionsColumnWidth", "inlineActionsColumnContent", "title", "rowSelectionCol", "grid", "usingSlickAutoColumnSize", "gridContainerWidth", "allVisibleColumns", "f", "allVisibleColumnWidth", "e", "fixedSizeColumns", "resizableColumns", "c", "fixedSizeColumnsWidth", "stretchableGridAreaWidth", "resizableColumnsWidth", "widthMultiplyingFactor", "newWidth", "increment", "opt", "recordId", "target", "o", "response", "items", "grouping_fields", "generateRowNumber", "__name", "groups", "gi", "subGroups", "rows", "groupInfo", "include", "sortBy", "r", "dialog", "cascadeField", "__decorateClass", "Serenity", "Q", "Serenity", "Q", "pendingChangesConfirmation", "element", "hasPendingChanges", "text", "__name", "DialogBase", "opt", "pendingChangesConfirmation", "DefaultEntityDialogOptions", "$FirstCategory", "$thisElement", "text", "selected_layout_display_span", "keyboard_choice_ul", "keyboard_choice_li", "select_choice", "selected_val", "switchKeybordLayout", "value", "editor", "e", "buttons", "extOptions", "cloneButton", "x", "cloneEntity", "dlg", "response", "data", "dialogElement", "dialogHeight", "titleBarHeight", "$categories", "categoriesTop", "width", "height", "top", "left", "$content", "dialogWidth", "entity", "__name", "__decorateClass"]
}
