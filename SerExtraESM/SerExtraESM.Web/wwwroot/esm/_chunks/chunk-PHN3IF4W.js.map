{
  "version": 3,
  "sources": ["../../../Modules/Administration/AuditLog/AuditLogActionTypeFormatter.ts", "../../../Modules/ServerTypes/_Ext/AuditActionType.ts", "../../../Modules/_Ext/Editors/StaticTextBlock.ts", "../../../Modules/ServerTypes/_Ext/AuditLogForm.ts", "../../../Modules/ServerTypes/_Ext/AuditLogRow.ts", "../../../Modules/ServerTypes/_Ext/AuditLogService.ts", "../../../Modules/ServerTypes/_Ext/AuditLogViewerService.ts", "../../../Modules/ServerTypes/_Ext/Months.ts", "../../../Modules/ServerTypes/_Ext/TimeUoM.ts", "../../../Modules/ServerTypes/_Ext/AuditLogColumns.ts"],
  "sourcesContent": ["import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Slick from \"@serenity-is/sleekgrid\"\r\nimport { AuditLogRow, AuditActionType } from \"@/ServerTypes/_Ext\";\r\n\r\n@Serenity.Decorators.registerFormatter('_Ext.AuditLogActionTypeFormatter', [Serenity.ISlickFormatter])\r\nexport class AuditLogActionTypeFormatter implements Serenity.Formatter {\r\n    static format(ctx: Slick.FormatterContext) {\r\n        let item = ctx.item as AuditLogRow;\r\n\r\n        let klass = '';\r\n        if (item.ActionType == AuditActionType.Update) {\r\n            klass = 'warning'\r\n        } else if (item.ActionType == AuditActionType.Delete) {\r\n            klass = 'danger'\r\n        } else {\r\n            klass = 'default'\r\n        }\r\n\r\n        return `<span class=\"badge bg-${klass}\">${AuditActionType[item.ActionType]}</span>`;\r\n    }\r\n\r\n    format(ctx: Slick.FormatterContext) {\r\n        return AuditLogActionTypeFormatter.format(ctx);\r\n    }\r\n}\r\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum AuditActionType {\n    Insert = 1,\n    Update = 2,\n    Delete = 3\n}\nDecorators.registerEnumType(AuditActionType, '_Ext.AuditActionType', 'Enum.Audit.AuditActionType');\n", "import { coalesce, Culture, Decorators, formatDate, ISetEditValue, PropertyItem, Widget } from \"@serenity-is/corelib\"\r\n\r\n@Decorators.registerEditor('_Ext.StaticTextBlock', [ISetEditValue])\r\n@Decorators.element(\"<div/>\")\r\nexport class StaticTextBlock extends Widget<StaticTextBlockOptions>\r\n    implements ISetEditValue {\r\n\r\n    private _value: string;\r\n\r\n    constructor(container: JQuery, options: StaticTextBlockOptions) {\r\n        super(container, options);\r\n\r\n        // hide the caption label for this editor if in a form. ugly hack\r\n        if (this.options.hideLabel)\r\n            this.element.closest('.field').find('.caption').hide();\r\n\r\n        // remove required asterisk (*)\r\n        this.element.closest('.field').find('sup').hide();\r\n\r\n        this.updateElementContent();\r\n    }\r\n\r\n    private updateElementContent() {\r\n        var text = coalesce(this.options.text, this._value);\r\n\r\n        if (this.options.isDate)\r\n            text = formatDate(text);\r\n\r\n        if (this.options.isDateTime)\r\n            text = formatDate(text, Culture.dateTimeFormat);\r\n\r\n        // if isLocalText is set, text is actually a local text key\r\n        if (this.options.isLocalText)\r\n            text = text(text);\r\n\r\n        // don't html encode if isHtml option is true\r\n        if (this.options.isHtml)\r\n            this.element.html(text);\r\n        else\r\n            this.element.text(text);\r\n    }\r\n\r\n    /**\r\n     * By implementing ISetEditValue interface, we allow this editor to display its field value.\r\n     * But only do this when our text content is not explicitly set in options\r\n     */\r\n    public setEditValue(source: any, property: PropertyItem) {\r\n        if (this.options.text == null) {\r\n            this._value = coalesce(this.options.text, source[property.name]);\r\n            this.updateElementContent();\r\n        }\r\n    }\r\n\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value) {\r\n        this._value = value;\r\n        this.updateElementContent();\r\n    }\r\n\r\n}\r\n\r\nexport interface StaticTextBlockOptions {\r\n    text: string;\r\n    isHtml: boolean;\r\n    isLocalText: boolean;\r\n    hideLabel: boolean;\r\n    isDate: boolean;\r\n    isDateTime: boolean;\r\n}\r\n", "\uFEFFimport { StaticTextBlock } from \"@/_Ext/Editors/StaticTextBlock\";\nimport { StringEditor, EnumEditor, DateTimeEditor, IntegerEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { AuditActionType } from \"./AuditActionType\";\n\nexport interface AuditLogForm {\n    EntityTableName: StringEditor;\n    ActionType: EnumEditor;\n    ActionDate: DateTimeEditor;\n    EntityId: IntegerEditor;\n    Changes: StaticTextBlock;\n    UserId: LookupEditor;\n    IpAddress: StringEditor;\n    SessionId: StringEditor;\n    RequestedURI: StringEditor;\n}\n\nexport class AuditLogForm extends PrefixedContext {\n    static readonly formKey = '_Ext.AuditLog';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!AuditLogForm.init)  {\n            AuditLogForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = EnumEditor;\n            var w2 = DateTimeEditor;\n            var w3 = IntegerEditor;\n            var w4 = StaticTextBlock;\n            var w5 = LookupEditor;\n\n            initFormType(AuditLogForm, [\n                'EntityTableName', w0,\n                'ActionType', w1,\n                'ActionDate', w2,\n                'EntityId', w3,\n                'Changes', w4,\n                'UserId', w5,\n                'IpAddress', w0,\n                'SessionId', w0,\n                'RequestedURI', w0\n            ]);\n        }\n    }\n}\n\n[AuditActionType]; // referenced types", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { AuditActionType } from \"./AuditActionType\";\n\nexport interface AuditLogRow {\n    Id?: number;\n    UserId?: string;\n    ActionType?: AuditActionType;\n    ActionDate?: string;\n    EntityTableName?: string;\n    EntityId?: string;\n    Changes?: string;\n    IpAddress?: string;\n    SessionId?: string;\n    RequestedURI?: string;\n}\n\nexport abstract class AuditLogRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'EntityTableName';\n    static readonly localTextPrefix = '_Ext.AuditLog';\n    static readonly deletePermission = 'Administration:AuditLog';\n    static readonly insertPermission = 'Administration:AuditLog';\n    static readonly readPermission = 'Administration:AuditLog';\n    static readonly updatePermission = 'Administration:AuditLog';\n\n    static readonly Fields = fieldsProxy<AuditLogRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { AuditLogRow } from \"./AuditLogRow\";\n\nexport namespace AuditLogService {\n    export const baseUrl = '_Ext/AuditLog';\n\n    export declare function Create(request: SaveRequest<AuditLogRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<AuditLogRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<AuditLogRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<AuditLogRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"_Ext/AuditLog/Create\",\n        Update: \"_Ext/AuditLog/Update\",\n        Delete: \"_Ext/AuditLog/Delete\",\n        Retrieve: \"_Ext/AuditLog/Retrieve\",\n        List: \"_Ext/AuditLog/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>AuditLogService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib\";\nimport { AuditLogViewerRequest } from \"./AuditLogViewerRequest\";\nimport { AuditLogViewerResponse } from \"./AuditLogViewerResponse\";\n\nexport namespace AuditLogViewerService {\n    export const baseUrl = 'AuditLogViewer';\n\n    export declare function List(request: AuditLogViewerRequest, onSuccess?: (response: AuditLogViewerResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        List: \"AuditLogViewer/List\"\n    } as const;\n\n    [\n        'List'\n    ].forEach(x => {\n        (<any>AuditLogViewerService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum Months {\n    January = 0,\n    February = 1,\n    March = 2,\n    April = 3,\n    May = 4,\n    June = 5,\n    July = 6,\n    August = 7,\n    September = 8,\n    October = 9,\n    November = 10,\n    December = 11\n}\nDecorators.registerEnumType(Months, '_Ext.Months', 'Months');\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TimeUoM {\n    Hour = 1,\n    Day = 2,\n    Week = 3,\n    Month = 4,\n    CalenderMonth = 5,\n    Year = 6\n}\nDecorators.registerEnumType(TimeUoM, '_Ext.TimeUoM', 'TimeUoM');\n", "\uFEFFimport { AuditLogActionTypeFormatter } from \"@/Administration/AuditLog/AuditLogActionTypeFormatter\";\nimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { AuditActionType } from \"./AuditActionType\";\nimport { AuditLogRow } from \"./AuditLogRow\";\n\nexport interface AuditLogColumns {\n    Id: Column<AuditLogRow>;\n    EntityTableName: Column<AuditLogRow>;\n    ActionType: Column<AuditLogRow>;\n    ActionDate: Column<AuditLogRow>;\n    EntityId: Column<AuditLogRow>;\n    Changes: Column<AuditLogRow>;\n    UserId: Column<AuditLogRow>;\n    IpAddress: Column<AuditLogRow>;\n    SessionId: Column<AuditLogRow>;\n    RequestedURI: Column<AuditLogRow>;\n}\n\nexport class AuditLogColumns extends ColumnsBase<AuditLogRow> {\n    static readonly columnsKey = '_Ext.AuditLog';\n    static readonly Fields = fieldsProxy<AuditLogColumns>();\n}\n\n[AuditLogActionTypeFormatter, AuditActionType]; // referenced types"],
  "mappings": "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",
  "names": ["Serenity", "import_corelib", "AuditActionType", "import_corelib", "StaticTextBlock", "container", "options", "text", "source", "property", "value", "__name", "__decorateClass", "import_corelib", "_AuditLogForm", "prefix", "w0", "w1", "w2", "w3", "w4", "StaticTextBlock", "w5", "AuditLogForm", "__name", "import_corelib", "AuditLogRow", "__name", "import_corelib", "AuditLogService", "x", "r", "s", "import_corelib", "AuditLogViewerService", "x", "r", "s", "import_corelib", "Months", "import_corelib", "TimeUoM", "AuditLogActionTypeFormatter", "ctx", "item", "klass", "AuditActionType", "__name", "__decorateClass", "import_corelib", "AuditLogColumns", "__name"]
}
